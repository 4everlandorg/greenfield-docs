"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[2900],{3905:(e,n,a)=>{a.d(n,{Zo:()=>s,kt:()=>k});var t=a(67294);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function c(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var i=t.createContext({}),d=function(e){var n=t.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},s=function(e){var n=d(e.components);return t.createElement(i.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=d(a),m=l,k=p["".concat(i,".").concat(m)]||p[m]||u[m]||r;return a?t.createElement(k,o(o({ref:n},s),{},{components:a})):t.createElement(k,o({ref:n},s))}));function k(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=m;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c[p]="string"==typeof e?e:l,o[1]=c;for(var d=2;d<r;d++)o[d]=a[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},42174:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var t=a(87462),l=(a(67294),a(3905));const r={title:"Account Balance",order:2,category:["cli"]},o="Account Balance",c={unversionedId:"api/blockchain-cli/bank",id:"api/blockchain-cli/bank",title:"Account Balance",description:"Abstract",source:"@site/docs/api/blockchain-cli/bank.md",sourceDirName:"api/blockchain-cli",slug:"/api/blockchain-cli/bank",permalink:"/greenfield-docs/docs/api/blockchain-cli/bank",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-docs/blob/main/docs/api/blockchain-cli/bank.md",tags:[],version:"current",frontMatter:{title:"Account Balance",order:2,category:["cli"]},sidebar:"apiReferenceSidebar",previous:{title:"Key Management",permalink:"/greenfield-docs/docs/api/blockchain-cli/key-management"},next:{title:"Storage Object",permalink:"/greenfield-docs/docs/api/blockchain-cli/storage"}},i={},d=[{value:"Abstract",id:"abstract",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Detailed CLI",id:"detailed-cli",level:2},{value:"Query",id:"query",level:3},{value:"balances",id:"balances",level:4},{value:"denom-metadata",id:"denom-metadata",level:4},{value:"total",id:"total",level:4},{value:"Transactions",id:"transactions",level:3},{value:"send",id:"send",level:4}],s={toc:d},p="wrapper";function u(e){let{components:n,...a}=e;return(0,l.kt)(p,(0,t.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"account-balance"},"Account Balance"),(0,l.kt)("h2",{id:"abstract"},"Abstract"),(0,l.kt)("p",null,"The bank module is responsible for handling BNB transfers between\naccounts and module accounts."),(0,l.kt)("p",null,"In addition, the bank module tracks and provides query support for the total\nsupply of BNB in the application."),(0,l.kt)("h2",{id:"quick-start"},"Quick Start"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'## Start a local cluster\n$ bash ./deployment/localup/localup.sh all 3\n$ alias gnfd="./build/bin/gnfd"\n$ receiver=0x32Ff14Fa1547314b95991976DB432F9Aa648A423\n## query the balance of receiver\n$ gnfd q bank balances $receiver --node tcp://127.0.0.1:26750 \n## send 500BNB to the receiver (note the decimal of BNB is 18)\n$ gnfd tx bank send validator0 $receiver 500000000000000000000BNB --home ./deployment/localup/.local/validator0 --keyring-backend test --node http://localhost:26750 -b block  -y\n## query the balance of receiver again\n$ gnfd q bank balances $receiver --node tcp://127.0.0.1:26750 \n## try send some token that does not exit, error is expected.\n$ gnfd tx bank send validator0 $receiver 500000000000000000000ETH --home ./deployment/localup/.local/validator0 --keyring-backend test --node http://localhost:26750 -b block  -y\n## try multi send, send each 500BNB to both receiver and receiver2\n$ receiver2=0x6d6247501b822fd4eaa76fcb64baea360279497f\n$ gnfd tx bank multi-send validator0 $receiver $receiver2 500000000000000000000BNB --home ./deployment/localup/.local/validator0 --keyring-backend test --node http://localhost:26750 -b block  -y --gas 500000\n## query the metadata of BNB\n$ gnfd q bank  denom-metadata --node tcp://127.0.0.1:26750 \n## query the total supply of BNB\n$ gnfd q bank  total    --denom BNB   --node tcp://127.0.0.1:26750 \n')),(0,l.kt)("h2",{id:"detailed-cli"},"Detailed CLI"),(0,l.kt)("p",null,"A user can query and interact with the ",(0,l.kt)("inlineCode",{parentName:"p"},"bank")," module using the CLI."),(0,l.kt)("h3",{id:"query"},"Query"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"query")," commands allow users to query ",(0,l.kt)("inlineCode",{parentName:"p"},"bank")," state."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd query bank --help\n")),(0,l.kt)("h4",{id:"balances"},"balances"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"balances")," command allows users to query account balances by address."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd query bank balances [address] [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd query bank balances 0x73a4Cf67b46D7E4efbb95Fc6F59D64129299c2E3\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'balances:\n- amount: "10000000000000000000000"\n  denom: BNB\npagination:\n  next_key: null\n  total: "0"\n')),(0,l.kt)("h4",{id:"denom-metadata"},"denom-metadata"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"denom-metadata")," command allows users to query metadata for coin denominations. A user can query metadata for a single denomination using the ",(0,l.kt)("inlineCode",{parentName:"p"},"--denom")," flag or all denominations without it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd query bank denom-metadata [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd query bank denom-metadata --denom BNB\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'metadata:\n  base: BNB\n  denom_units:\n    - aliases:\n        - wei\n      denom: BNB\n      exponent: 0\n  description: The native staking token of the Greenfield.\n  display: BNB\n  name: ""\n  symbol: ""\n  uri: ""\n  uri_hash: ""\n')),(0,l.kt)("h4",{id:"total"},"total"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"total")," command allows users to query the total supply of coins. A user can query the total supply for a single coin using the ",(0,l.kt)("inlineCode",{parentName:"p"},"--denom")," flag or all coins without it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd query bank total [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd query bank total --denom BNB\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'amount: "1000000000000000800000000000"\ndenom: BNB\n')),(0,l.kt)("h3",{id:"transactions"},"Transactions"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"tx")," commands allow users to interact with the ",(0,l.kt)("inlineCode",{parentName:"p"},"bank")," module."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd tx bank --help\n")),(0,l.kt)("h4",{id:"send"},"send"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"send")," command allows users to send funds from one account to another."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd tx bank send [from_key_or_address] [to_address] [amount] [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd tx bank send addr1.. addr2.. 100000000000000000000BNB\n")))}u.isMDXComponent=!0}}]);