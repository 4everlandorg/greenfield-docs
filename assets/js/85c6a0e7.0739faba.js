"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[621],{3905:(e,n,t)=>{t.d(n,{Zo:()=>i,kt:()=>k});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},i=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),c=m(t),u=l,k=c["".concat(s,".").concat(u)]||c[u]||d[u]||r;return t?a.createElement(k,p(p({ref:n},i),{},{components:t})):a.createElement(k,p({ref:n},i))}));function k(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,p=new Array(r);p[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:l,p[1]=o;for(var m=2;m<r;m++)p[m]=t[m];return a.createElement.apply(null,p)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},99981:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var a=t(87462),l=(t(67294),t(3905));const r={title:"Key Management",order:1},p="Key Management",o={unversionedId:"api/blockchain-cli/key-management",id:"api/blockchain-cli/key-management",title:"Key Management",description:"Abstract",source:"@site/docs/api/blockchain-cli/key-management.md",sourceDirName:"api/blockchain-cli",slug:"/api/blockchain-cli/key-management",permalink:"/greenfield-docs/docs/api/blockchain-cli/key-management",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-docs/blob/main/docs/api/blockchain-cli/key-management.md",tags:[],version:"current",frontMatter:{title:"Key Management",order:1},sidebar:"apiReferenceSidebar",previous:{title:"Blockchain Command Line",permalink:"/greenfield-docs/docs/api/blockchain-cli/"},next:{title:"Account Balance",permalink:"/greenfield-docs/docs/api/blockchain-cli/bank"}},s={},m=[{value:"Abstract",id:"abstract",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Create a New Key",id:"create-a-new-key",level:3},{value:"Show a Key",id:"show-a-key",level:3},{value:"List All Keys",id:"list-all-keys",level:3},{value:"Delete a Key",id:"delete-a-key",level:3},{value:"Detailed CLI",id:"detailed-cli",level:2},{value:"add",id:"add",level:4},{value:"delete",id:"delete",level:4},{value:"export",id:"export",level:4},{value:"import",id:"import",level:4},{value:"list",id:"list",level:4},{value:"migrate",id:"migrate",level:4},{value:"mnemonic",id:"mnemonic",level:4},{value:"rename",id:"rename",level:4},{value:"show",id:"show",level:4}],i={toc:m},c="wrapper";function d(e){let{components:n,...t}=e;return(0,l.kt)(c,(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"key-management"},"Key Management"),(0,l.kt)("h2",{id:"abstract"},"Abstract"),(0,l.kt)("p",null,"The greenfield-cosmos-sdk comes with a built-in keyring module that helps manage private and public keypairs for secure interactions with a node. In this tutorial, we'll explore how to use the gnfd command to manage keys in the greenfield-cosmos-sdk."),(0,l.kt)("h2",{id:"quick-start"},"Quick Start"),(0,l.kt)("h3",{id:"create-a-new-key"},"Create a New Key"),(0,l.kt)("p",null,"You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"add")," to create a new key with the name you want to use."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys add ${name}\n")),(0,l.kt)("p",null,"You can replace ",(0,l.kt)("inlineCode",{parentName:"p"},"${name}")," with any name you choose. The command will prompt you to enter a passphrase to encrypt the key."),(0,l.kt)("h3",{id:"show-a-key"},"Show a Key"),(0,l.kt)("p",null,"To show information about the key you just created, you can run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys show ${name}\n")),(0,l.kt)("h3",{id:"list-all-keys"},"List All Keys"),(0,l.kt)("p",null,"To list all existing keys, you can run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys list\n")),(0,l.kt)("h3",{id:"delete-a-key"},"Delete a Key"),(0,l.kt)("p",null,"To delete a key, you can use the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys delete ${name}\n")),(0,l.kt)("h2",{id:"detailed-cli"},"Detailed CLI"),(0,l.kt)("p",null,"The following section explains the different commands that can be used with the gnfd command to manage keys."),(0,l.kt)("h4",{id:"add"},"add"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"add")," command allows users to add a new key with specified name, encrypt it, and save to ${name} file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys add ${name} [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys add temp\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'- address: 0x48D54D...48b6d2\n  name: temp\n  pubkey: \'{"@type":"/ethermint.crypto.v1.ethsecp256k1.PubKey","key":"AqAzVo.../rZgIu"}\'\n  pubkey_hex: 02a03356...eb66022e\n  type: local\n\n**Important** write this mnemonic phrase in a safe place.\nIt is the only way to recover your account if you ever forget your password.\n\nposition number holiday ... cause bounce mercy\n')),(0,l.kt)("h4",{id:"delete"},"delete"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"delete")," command allows users to delete given keys."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys delete ${name}... [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys delete temp\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"Key reference will be deleted. Continue? [y/N]: y\nKey deleted forever (uh oh!)\n")),(0,l.kt)("h4",{id:"export"},"export"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"export")," command allows users to export private keys."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys export ${name} [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys export temp\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"Enter passphrase to encrypt the exported key:\n\n-----BEGIN TENDERMINT PRIVATE KEY-----\ntype: eth_secp256k1\nkdf: bcrypt\nsalt: D4AEA1...36B597\n\n3tvq8w39N...pTwLRdgVGI=\n=Wfrn\n-----END TENDERMINT PRIVATE KEY-----\n")),(0,l.kt)("h4",{id:"import"},"import"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"import")," command allows users to import private keys."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys import ${name} <keyfile> [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys import temp temp.info\n")),(0,l.kt)("h4",{id:"list"},"list"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"list")," command allows users to list all existed keys."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys list [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys list\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'- address: 0xA627c3...B61dF7\n  name: temp\n  pubkey: \'{"@type":"/ethermint.crypto.v1.ethsecp256k1.PubKey","key":"AhJl...0t8hJC"}\'\n  pubkey_hex: 021265c6...2df21242\n  type: local\n')),(0,l.kt)("h4",{id:"migrate"},"migrate"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"migrate")," command can migrate keys from amino to proto serialization format."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys migrate [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys migrate\n")),(0,l.kt)("h4",{id:"mnemonic"},"mnemonic"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"mnemonic")," command can compute the bip39 mnemonic for some input entropy."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys mnemonic [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys mnemonic\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"bridge bleak zebra ... gym quick antique\n")),(0,l.kt)("h4",{id:"rename"},"rename"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"rename")," command allows users to rename an existed key."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys rename <old_name> <new_name> [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys rename temp new_name\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"Key reference will be renamed from temp to new_name. Continue? [y/N]: y\nKey was successfully renamed from temp to new_name\n")),(0,l.kt)("h4",{id:"show"},"show"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"show")," command allows users to retrieve key information by name or address."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys show [name_or_address [name_or_address...]] [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"gnfd keys show temp\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'- address: 0xA627c3...B61dF7\n  name: temp\n  pubkey: \'{"@type":"/ethermint.crypto.v1.ethsecp256k1.PubKey","key":"AhJl...0t8hJC"}\'\n  pubkey_hex: 021265c6...2df21242\n  type: local\n')))}d.isMDXComponent=!0}}]);