"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[9723],{82015:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>m});var a=t(87462),i=(t(67294),t(3905));const o={title:"Blockchain Command Line",index:!0,dir:{order:4}},s="Blockchain Command-Line Interface",r={unversionedId:"api/blockchain-cli/README",id:"api/blockchain-cli/README",title:"Blockchain Command Line",description:"Since Greenfield Command Line interface is derived from Cosmos, The majority of the content in this page is copied from the Cosmos SDK.",source:"@site/docs/api/blockchain-cli/README.md",sourceDirName:"api/blockchain-cli",slug:"/api/blockchain-cli/",permalink:"/greenfield-docs/docs/api/blockchain-cli/",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-docs/blob/main/docs/api/blockchain-cli/README.md",tags:[],version:"current",frontMatter:{title:"Blockchain Command Line",index:!0,dir:{order:4}},sidebar:"apiReferenceSidebar",previous:{title:"RPC Endpoints",permalink:"/greenfield-docs/docs/api/endpoints"},next:{title:"Key Management",permalink:"/greenfield-docs/docs/api/blockchain-cli/key-management"}},l={},m=[{value:"Transaction Command",id:"transaction-command",level:3},{value:"Transaction Data",id:"transaction-data",level:3},{value:"Query Commands",id:"query-commands",level:3},{value:"Environment variables",id:"environment-variables",level:2}],d={toc:m},c="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"blockchain-command-line-interface"},"Blockchain Command-Line Interface"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Since Greenfield Command Line interface is derived from Cosmos, The majority of the content in this page is copied from the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.cosmos.network/main/core/cli"},"Cosmos SDK"),".")),(0,i.kt)("p",null,"There is no set way to create a CLI, but Greenfield typically use the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/spf13/cobra"},"Cobra Library"),".\nBuilding a CLI with Cobra entails defining commands, arguments, and flags. Commands understand the\nactions users wish to take, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"tx")," for creating a transaction and ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," for querying the application.\nEach command can also have nested subcommands, necessary for naming the specific transaction type.\nUsers also supply ",(0,i.kt)("strong",{parentName:"p"},"Arguments"),", such as account numbers to send coins to, and flags to modify various\naspects of the commands, such as gas prices or which node to broadcast to."),(0,i.kt)("h3",{id:"transaction-command"},"Transaction Command"),(0,i.kt)("p",null,"Here is an example of a command a user might enter to interact with ",(0,i.kt)("inlineCode",{parentName:"p"},"gnfd")," in order to send some tokens:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gnfd tx bank send $MY_ADDRESS $RECIPIENT 1000BNB --gas auto\n")),(0,i.kt)("p",null,"The first four strings specify the command:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The subcommand ",(0,i.kt)("inlineCode",{parentName:"li"},"tx"),", which contains all commands that let users create transactions."),(0,i.kt)("li",{parentName:"ul"},"The subcommand ",(0,i.kt)("inlineCode",{parentName:"li"},"bank")," to indicate which module to route the command to ",(0,i.kt)("inlineCode",{parentName:"li"},"x/bank")," module in this case."),(0,i.kt)("li",{parentName:"ul"},"The type of transaction ",(0,i.kt)("inlineCode",{parentName:"li"},"send"),".")),(0,i.kt)("p",null,"The next two strings are arguments: the ",(0,i.kt)("inlineCode",{parentName:"p"},"from_address")," the user wishes to send from, the ",(0,i.kt)("inlineCode",{parentName:"p"},"to_address")," of the recipient,\nand the ",(0,i.kt)("inlineCode",{parentName:"p"},"amount")," they want to send. Finally, the last few strings of the command are optional flags to indicate\nhow much the user is willing to pay in fees."),(0,i.kt)("h3",{id:"transaction-data"},"Transaction Data"),(0,i.kt)("p",null,"Greenfield utilizes the EIP712 transaction format. To view the transaction data, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"print-eip712-msg-type")," flag.\nBelow is an example of how to display the transaction data of sending tokens."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"gnfd tx bank send $MY_ADDRESS $RECIPIENT 1000BNB --print-eip712-msg-type\n")),(0,i.kt)("p",null,"From the output, we can obtain the following three fields:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"EIP712MessageType"),": This field represents the EIP712 messages format of the transaction.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "Coin": [\n    {\n      "name": "amount",\n      "type": "uint256"\n    },\n    {\n      "name": "denom",\n      "type": "string"\n    }\n  ],\n  "EIP712Domain": [\n    {\n      "name": "chainId",\n      "type": "uint256"\n    },\n    {\n      "name": "name",\n      "type": "string"\n    },\n    {\n      "name": "salt",\n      "type": "string"\n    },\n    {\n      "name": "verifyingContract",\n      "type": "string"\n    },\n    {\n      "name": "version",\n      "type": "string"\n    }\n  ],\n  "Fee": [\n    {\n      "name": "amount",\n      "type": "Coin[]"\n    },\n    {\n      "name": "gas_limit",\n      "type": "uint256"\n    },\n    {\n      "name": "granter",\n      "type": "string"\n    },\n    {\n      "name": "payer",\n      "type": "string"\n    }\n  ],\n  "Msg1": [\n    {\n      "name": "amount",\n      "type": "TypeMsg1Amount[]"\n    },\n    {\n      "name": "from_address",\n      "type": "string"\n    },\n    {\n      "name": "to_address",\n      "type": "string"\n    },\n    {\n      "name": "type",\n      "type": "string"\n    }\n  ],\n  "Tx": [\n    {\n      "name": "account_number",\n      "type": "uint256"\n    },\n    {\n      "name": "chain_id",\n      "type": "uint256"\n    },\n    {\n      "name": "fee",\n      "type": "Fee"\n    },\n    {\n      "name": "memo",\n      "type": "string"\n    },\n    {\n      "name": "msg1",\n      "type": "Msg1"\n    },\n    {\n      "name": "sequence",\n      "type": "uint256"\n    },\n    {\n      "name": "timeout_height",\n      "type": "uint256"\n    }\n  ],\n  "TypeMsg1Amount": [\n    {\n      "name": "amount",\n      "type": "string"\n    },\n    {\n      "name": "denom",\n      "type": "string"\n    }\n  ]\n}\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"MessageData"),": This field represents the messages data of the transaction, displayed in a readable format.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "msg1": {\n    "amount": [\n      {\n        "amount": "1000",\n        "denom": "BNB"\n      }\n    ],\n    "from_address": "0x0aA5170C854AA093e1c32F15285dE4Bf7f6802Ce",\n    "to_address": "0x2123B607e1b9E8Ae65FbE12585C1bE6838Bb32C7",\n    "type": "/cosmos.bank.v1beta1.MsgSend"\n  }\n}\n')),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"TxRawBytes"),": This field represents the encoded byte array of the transaction.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},"0a88010a85010a1c2f636f736d6f732e62616e6b2e763162657461312e4d736753656e6412650a2a307830614135313730433835344141303933653163333246313532383564453442663766363830324365122a3078323132334236303765316239453841653635466245313235383543316245363833384262333243371a0b0a03424e4212043130303012021200\n")),(0,i.kt)("p",null,"Once you have obtained these three fields of the transaction, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"gnfd-tx-sender")," to send the transaction\ninstead of using a command. Here are the steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Visit the ",(0,i.kt)("a",{parentName:"li",href:"https://gnfd-tx-sender.nodereal.io/"},"gnfd-tx-sender")," website."),(0,i.kt)("li",{parentName:"ol"},"Connect your wallet and switch to the correct network."),(0,i.kt)("li",{parentName:"ol"},"Navigate to the ",(0,i.kt)("inlineCode",{parentName:"li"},"Custom Tx")," page and fill in the aforementioned three fields accordingly."),(0,i.kt)("li",{parentName:"ol"},"Click the ",(0,i.kt)("inlineCode",{parentName:"li"},"Submit")," button and sign in the wallet when prompted."),(0,i.kt)("li",{parentName:"ol"},"Wait for confirmation.")),(0,i.kt)("h3",{id:"query-commands"},"Query Commands"),(0,i.kt)("p",null,"Queries are objects that allow users to retrieve information about the application's state. "),(0,i.kt)("p",null,"This ",(0,i.kt)("inlineCode",{parentName:"p"},"queryCommand")," function adds all the queries available to end-users for the application. This typically includes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"QueryTx")," and/or other transaction query commands from the ",(0,i.kt)("inlineCode",{parentName:"li"},"auth")," module which allow the user to search for a transaction by inputting its hash, a list of tags, or a block height. These queries allow users to see if transactions have been included in a block."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Account command")," from the ",(0,i.kt)("inlineCode",{parentName:"li"},"auth")," module, which displays the state (e.g. account balance) of an account given an address."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Validator command")," from the Cosmos SDK rpc client tools, which displays the validator set of a given height."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Block command")," from the Cosmos SDK rpc client tools, which displays the block data for a given height."),(0,i.kt)("li",{parentName:"ul"},"**All module query commands the application is dependent on,")),(0,i.kt)("p",null,"Here is an example of a ",(0,i.kt)("inlineCode",{parentName:"p"},"queryCommand"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"## query the metadata of BNB\ngnfd q bank denom-metadata --node https://greenfield-chain.bnbchain.org:443\n")),(0,i.kt)("h2",{id:"environment-variables"},"Environment variables"),(0,i.kt)("p",null,"Each flag is bound to its respective named environment variable. Then name of the environment variable consist of two parts "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"capital case ",(0,i.kt)("inlineCode",{parentName:"li"},"basename")," followed by flag name of the flag. ",(0,i.kt)("inlineCode",{parentName:"li"},"-")," must be substituted with ",(0,i.kt)("inlineCode",{parentName:"li"},"_"),". "),(0,i.kt)("li",{parentName:"ul"},"For example flag ",(0,i.kt)("inlineCode",{parentName:"li"},"--home")," for application with basename ",(0,i.kt)("inlineCode",{parentName:"li"},"GNFD")," is bound to ",(0,i.kt)("inlineCode",{parentName:"li"},"GNFD_HOME"),". It allows reducing\nthe amount of flags typed for routine operations. For example instead of:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'gnfd --home=./ --node=<node address> --chain-id="greenfield_1017-1" tx ... --from=<key name>\n')),(0,i.kt)("p",null,"this will be more convenient:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'# define env variables in .env, .envrc etc\nGNFD_HOME=<path to home>\nGNFD_NODE=<node address>\nGNFD_CHAIN_ID="greenfield_1017-1"\nGNFD_KEYRING_BACKEND="file"\n\n# and later just use\ngnfd tx ... --from=<key name>\n')))}p.isMDXComponent=!0}}]);