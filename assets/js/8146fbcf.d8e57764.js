"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[3849],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(t),h=a,m=p["".concat(s,".").concat(h)]||p[h]||u[h]||i;return t?r.createElement(m,l(l({ref:n},d),{},{components:t})):r.createElement(m,l({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=h;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(67294),a=t(86010);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:t,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i.tabItem,l),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>u});var r=t(87462),a=t(67294),i=t(86010),l=t(72389),o=t(67392),s=t(7094),c=t(12466);const d={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function p(e){const{lazy:n,block:t,defaultValue:l,values:p,groupId:u,className:h}=e,m=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=p??m.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),g=(0,o.l)(f,((e,n)=>e.value===n.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===l?l:l??m.find((e=>e.props.default))?.props.value??m[0].props.value;if(null!==b&&!f.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:k}=(0,s.U)(),[_,v]=(0,a.useState)(b),N=[],{blockElementScrollPositionUntilNextRender:w}=(0,c.o5)();if(null!=u){const e=y[u];null!=e&&e!==_&&f.some((n=>n.value===e))&&v(e)}const C=e=>{const n=e.currentTarget,t=N.indexOf(n),r=f[t].value;r!==_&&(w(n),v(r),null!=u&&k(u,String(r)))},B=e=>{let n=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;n=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;n=N[t]??N[N.length-1];break}}n?.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",d.tabList)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},h)},f.map((e=>{let{value:n,label:t,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:_===n?0:-1,"aria-selected":_===n,key:n,ref:e=>N.push(e),onKeyDown:B,onClick:C},l,{className:(0,i.Z)("tabs__item",d.tabItem,l?.className,{"tabs__item--active":_===n})}),t??n)}))),n?(0,a.cloneElement)(m.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},m.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==_})))))}function u(e){const n=(0,l.Z)();return a.createElement(p,(0,r.Z)({key:String(n)},e))}},36698:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=t(87462),a=(t(67294),t(3905)),i=t(65488),l=t(85162);const o={title:"Run Relayer",order:5},s="Run Relayer",c={unversionedId:"guide/greenfield-blockchain/run-node/run-relayer",id:"guide/greenfield-blockchain/run-node/run-relayer",title:"Run Relayer",description:"This tutorial is for running relayers for Greenfield to BSC and opBNB. Please note that they are using the same binary,",source:"@site/docs/guide/greenfield-blockchain/run-node/run-relayer.md",sourceDirName:"guide/greenfield-blockchain/run-node",slug:"/guide/greenfield-blockchain/run-node/run-relayer",permalink:"/greenfield-docs/docs/guide/greenfield-blockchain/run-node/run-relayer",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-docs/blob/main/docs/guide/greenfield-blockchain/run-node/run-relayer.md",tags:[],version:"current",frontMatter:{title:"Run Relayer",order:5},sidebar:"guideSidebar",previous:{title:"Run Node",permalink:"/greenfield-docs/docs/guide/greenfield-blockchain/run-node/"},next:{title:"Run Challenger",permalink:"/greenfield-docs/docs/guide/greenfield-blockchain/run-node/run-challenger"}},d={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Recommended Hardware",id:"recommended-hardware",level:3},{value:"Key Preparation",id:"key-preparation",level:3},{value:"Prepare binary",id:"prepare-binary",level:2},{value:"Config",id:"config",level:2},{value:"Build",id:"build",level:2},{value:"Run",id:"run",level:2},{value:"Create DB Schema",id:"create-db-schema",level:3},{value:"Start Relayer",id:"start-relayer",level:3}],u={toc:p},h="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(h,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"run-relayer"},"Run Relayer"),(0,a.kt)("p",null,"This tutorial is for running relayers for Greenfield to BSC and opBNB. Please note that they are using the same binary,\nbut two individual processes which require different databases connected. Most configs for these two relayers are\nthe same, with a few differences which will be illustrated below."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("h3",{id:"recommended-hardware"},"Recommended Hardware"),(0,a.kt)("p",null,"The following lists the recommended hardware requirements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Hardware Requirements: Desktop or laptop hardware running recent versions of Mac OS X, or Linux."),(0,a.kt)("li",{parentName:"ul"},"CPU: 4 cores"),(0,a.kt)("li",{parentName:"ul"},"RAM: 4 GB"),(0,a.kt)("li",{parentName:"ul"},"Relational database: Mysql")),(0,a.kt)("h3",{id:"key-preparation"},"Key Preparation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Relayer private key: This is the account which is used to relay transaction between Greenfield and the BSC/opBNB. Ensures it has balance on both Blockchain networks."),(0,a.kt)("li",{parentName:"ul"},"Bls private key: Used to create bls signature for cross-chain package.")),(0,a.kt)("p",null,"These two keys refer to ",(0,a.kt)("inlineCode",{parentName:"p"},"validator_relayer")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"validator_bls")," created in ",(0,a.kt)("a",{parentName:"p",href:"/greenfield-docs/docs/guide/greenfield-blockchain/run-node/become-validator"},"become-validator")," step 2."),(0,a.kt)("p",null,"You can retrieve them with the following commands."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gnfd keys export validator_relayer --unarmored-hex --unsafe --keyring-backend test\n\ngnfd keys export validator_bls --unarmored-hex --unsafe --keyring-backend test\n")),(0,a.kt)("h2",{id:"prepare-binary"},"Prepare binary"),(0,a.kt)("p",null,"Get the greenfield-relayer app by running the following command in your terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone --branch \"$(curl -s https://api.github.com/repos/bnb-chain/greenfield-relayer/releases/latest  | jq -r '.tag_name')\" https://github.com/bnb-chain/greenfield-relayer.git\ncd greenfield-relayer\n")),(0,a.kt)("h2",{id:"config"},"Config"),(0,a.kt)("p",null,"Modify ",(0,a.kt)("inlineCode",{parentName:"p"},"config/config.json"),". Or, you can create a new one and specify the config path by ",(0,a.kt)("inlineCode",{parentName:"p"},"--config-path")," flag when start the relayer."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For Testnet config, refer to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/bnb-chain-charts/blob/master/gnfd-relayer-testnet-values/values.yaml#L4"},"Testnet configure"),".\nYou can use it as a template for your Mainnet config by adapting a few changes as illustrated below.")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Set relayer private key and bls private key import method (via file or aws secret) and keys, the block monitoring start heights."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},'  "greenfield_config": {\n    "key_type": "local_private_key", // or "aws_private_key" if you are using aws secret manager.\n     ...\n    "aws_bls_secret_name": "",\n    "private_key": "your_private_key", // this is the relayer private key for relaying transaction.\n    "bls_private_key": "your_private_key", // this is the bls key for signing crosschain package.\n    "rpc_addrs": [\n      "https://greenfield-chain.bnbchain.org:443"\n     ]\n    "chain_id": 1017,\n     ...\n    "start_height": 1,  // please change to the current block height of Greenfield network.\n    "chain_id_string": "greenfield_1017-1"\n  }, \n  "bsc_config": {\n    "key_type": "local_private_key",  // or "aws_private_key" if you are using aws secret manager.\n    ...\n    "rpc_addrs": [\n       "BSC_RPC"\n    ],\n    "private_key": "your_private_key", // same as the above one in greenfield_congfig.\n    "gas_limit": 20000000,\n    ...\n    "start_height": 0,   // please change to the current block height of BSC network.\n    "chain_id": 56  // 56 is BSC Mainnet chain id.\n  }\n')),(0,a.kt)("p",{parentName:"li"},"For setting up the relayer that crosschain to opBNB, modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"bsc_config")," as below."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},'"bsc_config": {\n     "op_bnb": true, // this specifies that conifg is for opBNB crosschain.\n     "key_type": "local_private_key",  // or "aws_private_key" if you are using aws secret manager.\n     ...\n     "rpc_addrs": [\n        "opBNB_RPC"\n     ],\n     "private_key": "your_private_key", // same as the above one in greenfield_congfig.\n     "gas_limit": 20000000,\n     ...\n     "start_height": 0,   // please change to the current block height of opBNB network.\n     "chain_id": 5611 // opBNB testnet chain id\n   }\n')),(0,a.kt)("p",{parentName:"li"},"Note:\nRefer to ",(0,a.kt)("a",{parentName:"p",href:"/greenfield-docs/docs/api/endpoints"},"Greenfield Endpoints")," for Greenfield RPC address,\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.bscscan.com/misc-tools-and-utilities/public-rpc-nodes"},"BSC Endpoints")," for BSC RPC address, and use the appropriate ones based on your location,\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.bnbchain.org/opbnb-docs/docs/build-on-opbnb/opbnb-network-info"},"opBNB Endpoints")," for opBNB RPC address, and use the appropriate ones based on your location."),(0,a.kt)("p",{parentName:"li"},"You might encounter ",(0,a.kt)("inlineCode",{parentName:"p"},"Rate limit")," issue for using official BSC/opBNB endpoints, we would highly recommend using 3rd Party RPCs, like the ",(0,a.kt)("a",{parentName:"p",href:"https://nodereal.io/meganode"},"NodeReal MegaNode"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Config crossChain, greenfield light client and relayer hub smart contracts addresses, others can keep the default value, refer to this\n",(0,a.kt)("a",{parentName:"p",href:"/greenfield-docs/docs/guide/core-concept/cross-chain/contract-list"},"contract-list")," to get addresses for Mainnet/Testnet."))),(0,a.kt)(i.Z,{defaultValue:"BSC-Mainnet",values:[{label:"BSC-Mainnet",value:"BSC-Mainnet"},{label:"BSC-Testnet",value:"BSC-Testnet"},{label:"opBNB-Testnet",value:"opBNB-Testnet"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"BSC-Mainnet",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'"relay_config": {\n    ... \n    "cross_chain_contract_addr": "0x77e719b714be09F70D484AB81F70D02B0E182f7d",\n    "greenfield_light_client_contract_addr": "0x433bB48Bd86c089375e53b2E2873A9C4bC0e986B",\n    "relayer_hub_contract_addr": "0x31C477F05CE58bB81A9FB4b8c00560f1cBe185d1"\n  }\n'))),(0,a.kt)(l.Z,{value:"BSC-Testnet",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'"relay_config": {\n    ... \n    "cross_chain_contract_addr": "0xa5B2c9194131A4E0BFaCbF9E5D6722c873159cb7",\n    "greenfield_light_client_contract_addr": "0xa9249cefF9cBc9BAC0D9167b79123b6C7413F50a",\n    "relayer_hub_contract_addr": "0x91cA83d95c8454277d1C297F78082B589e6E4Ea3"\n  }\n'))),(0,a.kt)(l.Z,{value:"opBNB-Testnet",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'"relay_config": {\n    ... \n    "cross_chain_contract_addr": "0xF0Bcf6E4F72bCB33b944275dd5c9d4540a259eB9",\n    "greenfield_light_client_contract_addr": "0xc50791892F6528E42A58DD07869726079C71F3f2",\n    "relayer_hub_contract_addr": "0x59ACcF658CC4589C3C41720fd48e869B97A748a1"\n  }\n')))),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Config the database settings.",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},'   "db_config": {\n     "dialect": "mysql",\n     "key_type": "local_private_key",\n     "aws_region": "",\n     "aws_secret_name": "",\n     "password": "${pass}",\n     "username": "${user}",\n     "url": "tcp(${host})/greenfield-relayer?charset=utf8&parseTime=True&loc=Local",\n     "max_idle_conns": 10,\n     "max_open_conns": 100\n   }\n')),"  Note: Please  replace ",(0,a.kt)("inlineCode",{parentName:"li"},"${pass}"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"${user}"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"${host}")," with your Mysql instance credential and host. And use a distinct database other than ",(0,a.kt)("inlineCode",{parentName:"li"},"greenfield-relayer"),", e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"greenfield-op-relayer")," when running the\nGreenfield Relayer for crosschain to opBNB on the same DB instance.  ")),(0,a.kt)("h2",{id:"build"},"Build"),(0,a.kt)("p",null,"Build the binary:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"make build\n")),(0,a.kt)("p",null,"Or"),(0,a.kt)("p",null,"Build docker image:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"make build_docker\n")),(0,a.kt)("h2",{id:"run"},"Run"),(0,a.kt)("h3",{id:"create-db-schema"},"Create DB Schema"),(0,a.kt)("p",null,"Make sure the database instance is running."),(0,a.kt)("p",null,"Create schema by MySQL client:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"CREATE SCHEMA IF NOT EXISTS `greenfield-relayer` DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n")),(0,a.kt)("h3",{id:"start-relayer"},"Start Relayer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"./build/greenfield-relayer --config-type [local or aws] --config-path config_file_path  --aws-region [aws region or omit] --aws-secret-key [aws secret key for config or omit]\n")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"./build/greenfield-relayer --config-type local --config-path config/config.json\n")),(0,a.kt)("p",null,"Run docker:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},'docker run -it -v /your/data/path:/greenfield-relayer -e CONFIG_TYPE="local" -e CONFIG_FILE_PATH=/your/config/file/path/in/container -d greenfield-relayer\n')),(0,a.kt)("p",null,"Or you can deploy the greenfield relayer application using Helm Chart V3. Please refer to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/greenfield/blob/master/deployment/helm/relayer-readme.md"},"relayer-readme"),"."))}m.isMDXComponent=!0}}]);