"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[9878],{65488:(e,a,n)=>{n.d(a,{Z:()=>p});var t=n(87462),r=n(67294),l=n(86010),i=n(72389),o=n(67392),s=n(7094),c=n(12466);const d={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function u(e){const{lazy:a,block:n,defaultValue:i,values:u,groupId:p,className:h}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),m=u??g.map((e=>{let{props:{value:a,label:n,attributes:t}}=e;return{value:a,label:n,attributes:t}})),k=(0,o.l)(m,((e,a)=>e.value===a.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===i?i:i??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==f&&!m.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${m.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:y}=(0,s.U)(),[v,_]=(0,r.useState)(f),N=[],{blockElementScrollPositionUntilNextRender:w}=(0,c.o5)();if(null!=p){const e=b[p];null!=e&&e!==v&&m.some((a=>a.value===e))&&_(e)}const C=e=>{const a=e.currentTarget,n=N.indexOf(a),t=m[n].value;t!==v&&(w(a),_(t),null!=p&&y(p,String(t)))},T=e=>{let a=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const n=N.indexOf(e.currentTarget)+1;a=N[n]??N[0];break}case"ArrowLeft":{const n=N.indexOf(e.currentTarget)-1;a=N[n]??N[N.length-1];break}}a?.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",d.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},h)},m.map((e=>{let{value:a,label:n,attributes:i}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:v===a?0:-1,"aria-selected":v===a,key:a,ref:e=>N.push(e),onKeyDown:T,onClick:C},i,{className:(0,l.Z)("tabs__item",d.tabItem,i?.className,{"tabs__item--active":v===a})}),n??a)}))),a?(0,r.cloneElement)(g.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==v})))))}function p(e){const a=(0,i.Z)();return r.createElement(u,(0,t.Z)({key:String(a)},e))}},41430:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var t=n(87462),r=(n(67294),n(3905)),l=n(65488),i=n(85162);const o={title:"Run Challenger",order:6},s=void 0,c={unversionedId:"guide/greenfield-blockchain/run-node/run-challenger",id:"guide/greenfield-blockchain/run-node/run-challenger",title:"Run Challenger",description:"Prerequisites",source:"@site/docs/guide/greenfield-blockchain/run-node/run-challenger.md",sourceDirName:"guide/greenfield-blockchain/run-node",slug:"/guide/greenfield-blockchain/run-node/run-challenger",permalink:"/greenfield-docs/docs/guide/greenfield-blockchain/run-node/run-challenger",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-docs/blob/main/docs/guide/greenfield-blockchain/run-node/run-challenger.md",tags:[],version:"current",frontMatter:{title:"Run Challenger",order:6},sidebar:"guideSidebar",previous:{title:"Run Relayer",permalink:"/greenfield-docs/docs/guide/greenfield-blockchain/run-node/run-relayer"},next:{title:"Become Validator",permalink:"/greenfield-docs/docs/guide/greenfield-blockchain/run-node/become-validator"}},d={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Recommended Hardware",id:"recommended-hardware",level:3},{value:"Key Preparation",id:"key-preparation",level:3},{value:"Prepare Binary",id:"prepare-binary",level:2},{value:"Config",id:"config",level:2},{value:"Build",id:"build",level:2},{value:"Run",id:"run",level:2},{value:"Run MySQL in Docker(this can be skipped if you are using sqlite)",id:"run-mysql-in-dockerthis-can-be-skipped-if-you-are-using-sqlite",level:4},{value:"Create DB Schema",id:"create-db-schema",level:3},{value:"Start Challenger",id:"start-challenger",level:3}],p={toc:u},h="wrapper";function g(e){let{components:a,...n}=e;return(0,r.kt)(h,(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("h3",{id:"recommended-hardware"},"Recommended Hardware"),(0,r.kt)("p",null,"The following lists the recommended hardware requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Hardware Requirements: Desktop or laptop hardware running recent versions of Mac OS X, or Linux."),(0,r.kt)("li",{parentName:"ul"},"CPU: 4 cores"),(0,r.kt)("li",{parentName:"ul"},"RAM: 4 GB"),(0,r.kt)("li",{parentName:"ul"},"Relational database: Mysql")),(0,r.kt)("h3",{id:"key-preparation"},"Key Preparation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Challenger private key: Used to sign and approve transactions."),(0,r.kt)("li",{parentName:"ul"},"Bls private key: Used to aggregate votes.")),(0,r.kt)("p",null,"These two keys refer to ",(0,r.kt)("inlineCode",{parentName:"p"},"validator_challenger")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"validator_bls")," created in ",(0,r.kt)("a",{parentName:"p",href:"/greenfield-docs/docs/guide/greenfield-blockchain/run-node/become-validator"},"become-validator")," step 2."),(0,r.kt)("p",null,"You can retrieve them with the following commands."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"gnfd keys export validator_challenger --unarmored-hex --unsafe --keyring-backend test\n\ngnfd keys export validator_bls --unarmored-hex --unsafe --keyring-backend test\n")),(0,r.kt)("h2",{id:"prepare-binary"},"Prepare Binary"),(0,r.kt)("p",null,"Get the greenfield-challenger app by running the following command in your terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone --branch \"$(curl -s https://api.github.com/repos/bnb-chain/greenfield-challenger/releases/latest  | jq -r '.tag_name')\" https://github.com/bnb-chain/greenfield-challenger.git\ncd greenfield-challenger\n")),(0,r.kt)("h2",{id:"config"},"Config"),(0,r.kt)("p",null,"Modify ",(0,r.kt)("inlineCode",{parentName:"p"},"config/config.json"),". Or, you can create a new one and specify the config path by ",(0,r.kt)("inlineCode",{parentName:"p"},"--config-path")," flag when start the challenger."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Reference for a complete ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/bnb-chain-charts/blob/master/gnfd-challenger-testnet-values/values.yaml#L4"},"config file"))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Set your private key and bls key (via file or aws secret)."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'  "greenfield_config": {\n    "key_type": "local_private_key" or "aws_private_key" depending on whether you are storing the keys on aws or locally in this json file\n    "aws_region": set this if you chose "aws_private_key"\n    "aws_secret_name": set this if you chose "aws_private_key"\n    "aws_bls_secret_name": set this if you chose "aws_private_key"\n    "private_key": set this if you chose "local_private_key"\n    "bls_private_key": set this if you chose "local_private_key" \n     ...\n  }\n')))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The term ",(0,r.kt)("inlineCode",{parentName:"p"},"private_key")," refers to the private key of the ",(0,r.kt)("inlineCode",{parentName:"p"},"validator_challenger")," account, while ",(0,r.kt)("inlineCode",{parentName:"p"},"bls_private_key")," refers\nto the private key of the ",(0,r.kt)("inlineCode",{parentName:"p"},"validator_bls")," account. To obtain these private keys, you can follow the instructions\nprovided in the ",(0,r.kt)("a",{parentName:"p",href:"#key-preparation"},"key preparation")," section.")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Set your RPC Address and Chain ID    ")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"mainnet",label:"Mainnet",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'"greenfield_config": {\n    rpcAddr = "https://greenfield-chain.bnbchain.org:443"\n    chainId = "greenfield_1017-1"\n}\n'))),(0,r.kt)(i.Z,{value:"testnet",label:"Testnet",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'"greenfield_config": {\n    rpcAddr = "https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org:443"\n    chainId = "greenfield_5600-1"\n}\n')))),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Config your database settings."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'"db_config": {\n  "dialect": "mysql",\n  "db_path": "your_db_path"\n  "key_type": "local_private_key" or "aws_private_key" depending on whether you are storing the keys on aws or locally in this json file\n  "aws_region": set this if you chose "aws_private_key", else leave as ""\n  "aws_secret_name": set this if you chose "aws_private_key", else leave as ""\n  "username": set db username if you chose "local_private_key", else leave as ""\n  "password": set db password if you chose "local_private_key", else leave as ""\n  ...\n}\n')))),(0,r.kt)("h2",{id:"build"},"Build"),(0,r.kt)("p",null,"Build binary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"make build\n")),(0,r.kt)("p",null,"Build docker image:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"make build_docker\n")),(0,r.kt)("h2",{id:"run"},"Run"),(0,r.kt)("h4",{id:"run-mysql-in-dockerthis-can-be-skipped-if-you-are-using-sqlite"},"Run MySQL in Docker(this can be skipped if you are using sqlite)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker run --name gnfd-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7\n")),(0,r.kt)("h3",{id:"create-db-schema"},"Create DB Schema"),(0,r.kt)("p",null,"Create schema in MySQL client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"CREATE SCHEMA IF NOT EXISTS `challenger` DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n")),(0,r.kt)("h3",{id:"start-challenger"},"Start Challenger"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"./build/greenfield-challenger --config-type [local or aws] --config-path config_file_path  --aws-region [aws region or omit] --aws-secret-key [aws secret key for config or omit]\n")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"./build/greenfield-challenger --config-type local --config-path config/config.json\n")),(0,r.kt)("p",null,"Run docker:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},'docker run -it -v /your/data/path:/greenfield-challenger -e CONFIG_TYPE="local" -e CONFIG_FILE_PATH=/your/config/file/path/in/container -d greenfield-challenger\n')),(0,r.kt)("p",null,"Or you can deploy the greenfield challenger application using Helm Chart V3. Please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/greenfield/blob/master/deployment/helm/challenger-readme.md"},"challenger-readme"),"."))}g.isMDXComponent=!0}}]);