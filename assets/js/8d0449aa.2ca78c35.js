"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[820],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),l=d(n),g=o,f=l["".concat(p,".").concat(g)]||l[g]||u[g]||i;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=g;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[l]="string"==typeof e?e:o,s[1]=a;for(var d=2;d<i;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},49570:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=n(87462),o=(n(67294),n(3905));const i={title:"P2P",order:2},s="P2P",a={unversionedId:"guide/storage-provider/services/p2p",id:"guide/storage-provider/services/p2p",title:"P2P",description:"P2P is responsible for the interaction of control flow between SPs.",source:"@site/docs/guide/storage-provider/services/p2p.md",sourceDirName:"guide/storage-provider/services",slug:"/guide/storage-provider/services/p2p",permalink:"/greenfield-docs/docs/guide/storage-provider/services/p2p",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-docs/blob/main/docs/guide/storage-provider/services/p2p.md",tags:[],version:"current",frontMatter:{title:"P2P",order:2},sidebar:"guideSidebar",previous:{title:"Manager",permalink:"/greenfield-docs/docs/guide/storage-provider/services/manager"},next:{title:"SPDB",permalink:"/greenfield-docs/docs/guide/storage-provider/services/spdb"}},p={},d=[{value:"Ping Service",id:"ping-service",level:2},{value:"GetReplicateApproval Service",id:"getreplicateapproval-service",level:2}],c={toc:d},l="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"p2p"},"P2P"),(0,o.kt)("p",null,"P2P is responsible for the interaction of control flow between SPs."),(0,o.kt)("h2",{id:"ping-service"},"Ping Service"),(0,o.kt)("p",null,"SP abandoned the conventional p2p ping service, because the conventional ping service is managed and communicated in\nunits of p2p nodes, without considering the fairness between SPs, the SP's p2p service is more inclined to synchronize\nmessages to different SPs, instead of synchronous p2p nodes. For this purpose we have customized ping service."),(0,o.kt)("p",null,"The customized ping service implements dynamic update of p2p permanent nodes. As usual, permanent nodes should cover as\nmany SPs as possible, which is more decentralized, eg: get replicate approval request needs at least 6 or more replies\nfrom different SPs but p2p node are offline and replacement, which is an inevitable problem, If nodes belonging to the\nsame sp all fail and are replaced, then the sp will be unable to communicate, this requires dynamic updates permanent nodes."),(0,o.kt)("p",null,"The customized ping service also implements the pruning function of permanent nodes. For zombie nodes, pruning strategy\ntakes into account the information of the SP dimension, and uses a very conservative pruning strategy. Nodes are only\npruned if there are enough backups for one SP and multiple failed interactions, can try to keep each SP with enough nodes\nto try to connect, so that each sp has an equal opportunity to receive requests"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"// Ping defines the heartbeat request between p2p nodes\nmessage Ping {\n  // sp_operator_address define sp operator public key\n  string sp_operator_address = 1;\n  // signature define the signature of sp sign the msg\n  bytes signature = 2;\n}\n\n// Node defines the p2p node info\nmessage Node {\n  // node_id defines the node id\n  string node_id = 1;\n  // multi_addr define the node multi addr\n  repeated string multi_addr = 2;\n}\n\n// Pong defines the heartbeat response between p2p nodes\nmessage Pong {\n  // nodes define the\n  repeated Node nodes = 1;\n  // sp_operator_address define sp operator public key\n  string sp_operator_address = 2;\n  // signature define the signature of sp sign the msg\n  bytes signature = 3;\n}\n\n")),(0,o.kt)("h2",{id:"getreplicateapproval-service"},"GetReplicateApproval Service"),(0,o.kt)("p",null,"rimary SP sends GetApprovalRequest to other SPs, asking if they are willing to serve as obeject's secondary SP through\nthe p2p GetReplicateApproval service. The GetReplicateApproval service offers GetReplicateApproval interface, the params\nincludes ObjectInfo is used to make decisions for other SPs whether they are willing to accept approval, expectedAccept\nexpectedAccept indicates that it can return after receiving the number of approvals, timeout means that it can return\nafter the timeout and has not received expectedAccept approvals in time."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"GetReplicateApproval(object *storagetypes.ObjectInfo, expectedAccept int, timeout int64) \n")),(0,o.kt)("p",null,"GetApprovalRequest includes in addition to the object info, the primary SP operator address that used to check whether\nit is a valid SP, and signature that generated by primary SP signing the request used to verify the request\nand SP operator address match."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"// GetApprovalRequest defines the request of getting approval\nmessage GetApprovalRequest {\n  // object_info define the object info for getting approval\n  bnbchain.greenfield.storage.ObjectInfo object_info = 1;\n  // sp_operator_address define sp operator public key\n  string sp_operator_address = 2;\n  // signature define the signature of sp sign the msg\n  bytes signature = 4;\n}\n")),(0,o.kt)("p",null,"GetApprovalResponse additionally adds expired time if the SP ack approval, it will be given a valid deadline and\nrefused reason if the SP refuses the approval, will be given the reason."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"// GetApprovalResponse defines the response of getting approval\nmessage GetApprovalResponse {\n  // object_info define the object info for getting approval\n  bnbchain.greenfield.storage.ObjectInfo object_info = 1;\n  // sp_operator_address define sp operator public key\n  string sp_operator_address = 2;\n  // expired_time defines the approval valid deadline\n  int64 expired_time = 3;\n  // refused_reason defines the reason of refusing\n  string refused_reason = 4;\n  // signature define the signature of sp sign the msg\n  bytes signature = 5;\n}\n")))}u.isMDXComponent=!0}}]);