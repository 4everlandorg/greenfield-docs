"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[8532],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,k=u["".concat(o,".").concat(m)]||u[m]||p[m]||i;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48567:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={title:"Mirror Bucket with Greenfield SDK",order:3},l="Access Control with Greenfield SDK",s={unversionedId:"tutorials/native-dapp/sdk/cross-chain",id:"tutorials/native-dapp/sdk/cross-chain",title:"Mirror Bucket with Greenfield SDK",description:"In this tutorial we\u2019ll use the go-SDK library to manage your buckets and objects.",source:"@site/docs/tutorials/native-dapp/sdk/cross-chain.md",sourceDirName:"tutorials/native-dapp/sdk",slug:"/tutorials/native-dapp/sdk/cross-chain",permalink:"/greenfield-docs/docs/tutorials/native-dapp/sdk/cross-chain",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-docs/blob/main/docs/tutorials/native-dapp/sdk/cross-chain.md",tags:[],version:"current",frontMatter:{title:"Mirror Bucket with Greenfield SDK",order:3},sidebar:"tutorialsSidebar",previous:{title:"Access Control with Greenfield SDK",permalink:"/greenfield-docs/docs/tutorials/native-dapp/sdk/access-control"},next:{title:"How to develop BSC smart contract for Greenfield",permalink:"/greenfield-docs/docs/tutorials/dapp/quick-start"}},o={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Cross Chain Mechanism",id:"cross-chain-mechanism",level:2},{value:"Account Setup",id:"account-setup",level:2},{value:"Create a Go Project",id:"create-a-go-project",level:3},{value:"Init",id:"init",level:3},{value:"Add SDK Dependencies",id:"add-sdk-dependencies",level:3},{value:"Install dependensies",id:"install-dependensies",level:3},{value:"Test a simple function",id:"test-a-simple-function",level:3},{value:"Account setup",id:"account-setup-1",level:3},{value:"Create Buckets",id:"create-buckets",level:3},{value:"Mirror Bucket Metadata to BSC",id:"mirror-bucket-metadata-to-bsc",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"access-control-with-greenfield-sdk"},"Access Control with Greenfield SDK"),(0,r.kt)("p",null,"In this tutorial we\u2019ll use the go-SDK library to manage your buckets and objects."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Before getting started, you should be familiar with:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.bnbchain.org/greenfield-docs/docs/guide/introduction/overview"},"Greenfield basics")),(0,r.kt)("li",{parentName:"ul"},"Greenfield command line ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/bnb-chain/greenfield-cmd#examples"},"examples"))),(0,r.kt)("p",null,"Also, make sure you have the following dependencies installed with the latest version:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Go version above 1.20")),(0,r.kt)("h2",{id:"cross-chain-mechanism"},"Cross Chain Mechanism"),(0,r.kt)("p",null,"Cross-chain communication serves as the foundation for enabling the exchange of assets, data, and functionalities across disparate blockchains, facilitating a more connected and efficient decentralised ecosystem."),(0,r.kt)("p",null,"Cross-communication between BNB Greenfield and BSC stands apart from the approaches taken by Polkadot, Chainlink, and Cosmos in several significant aspects."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Cross chain communication features")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"BNB Greenfield/BSC")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Cosmos/IBC")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Polkadot")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Chainlink CCIP")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Bulk messaging"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom and performant"),(0,r.kt)("td",{parentName:"tr",align:null},"General application"),(0,r.kt)("td",{parentName:"tr",align:null},"General application"),(0,r.kt)("td",{parentName:"tr",align:null},"General application")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Compatibility"),(0,r.kt)("td",{parentName:"tr",align:null},"Fully compatible with EVM and Ethereum L2s"),(0,r.kt)("td",{parentName:"tr",align:null},"Only Cosmos ecosystem"),(0,r.kt)("td",{parentName:"tr",align:null},"Only Polkadot ecosystem"),(0,r.kt)("td",{parentName:"tr",align:null},"Specific implementations for each blockchain")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Security Model"),(0,r.kt)("td",{parentName:"tr",align:null},"Own validators"),(0,r.kt)("td",{parentName:"tr",align:null},"Shared"),(0,r.kt)("td",{parentName:"tr",align:null},"Shared"),(0,r.kt)("td",{parentName:"tr",align:null},"Own validators")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tokenomics"),(0,r.kt)("td",{parentName:"tr",align:null},"BNB"),(0,r.kt)("td",{parentName:"tr",align:null},"ATOM"),(0,r.kt)("td",{parentName:"tr",align:null},"DOT"),(0,r.kt)("td",{parentName:"tr",align:null},"LINK")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Address Scheme"),(0,r.kt)("td",{parentName:"tr",align:null},"Unified - same addresses"),(0,r.kt)("td",{parentName:"tr",align:null},"Can be different addresses"),(0,r.kt)("td",{parentName:"tr",align:null},"Can be different addresses"),(0,r.kt)("td",{parentName:"tr",align:null},"Can be different addresses")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Composability"),(0,r.kt)("td",{parentName:"tr",align:null},"Shared components with BNB Chain ecosystem"),(0,r.kt)("td",{parentName:"tr",align:null},"Implementation in progress"),(0,r.kt)("td",{parentName:"tr",align:null},"Shared components with Polkadot ecosystem"),(0,r.kt)("td",{parentName:"tr",align:null},"New implementation for each network")))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.bnbchain.org/en/blog/cross-chain-innovation-in-the-bnb-greenfield-programmable-environment"},"https://www.bnbchain.org/en/blog/cross-chain-innovation-in-the-bnb-greenfield-programmable-environment")),(0,r.kt)("h2",{id:"account-setup"},"Account Setup"),(0,r.kt)("h3",{id:"create-a-go-project"},"Create a Go Project"),(0,r.kt)("p",null,"Let\u2019s set up a Go project with the necessary dependencies."),(0,r.kt)("h3",{id:"init"},"Init"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ mkdir ~/hellogreenfield\n$ cd ~/hellogreenfield\n$ go mod init hellogreenfield\n")),(0,r.kt)("h3",{id:"add-sdk-dependencies"},"Add SDK Dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ go get github.com/bnb-chain/greenfield-go-sdk\n")),(0,r.kt)("p",null,"Edit go.mod to replace dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"replace (\n    cosmossdk.io/api => github.com/bnb-chain/greenfield-cosmos-sdk/api v0.0.0-20230425074444-eb5869b05fe9\n    cosmossdk.io/math => github.com/bnb-chain/greenfield-cosmos-sdk/math v0.0.0-20230425074444-eb5869b05fe9\n    github.com/cometbft/cometbft => github.com/bnb-chain/greenfield-cometbft v0.0.2\n    github.com/cometbft/cometbft-db => github.com/bnb-chain/greenfield-cometbft-db v0.8.1-alpha.1\n    github.com/cosmos/cosmos-sdk => github.com/bnb-chain/greenfield-cosmos-sdk v0.2.3\n    github.com/cosmos/iavl => github.com/bnb-chain/greenfield-iavl v0.20.1-alpha.1\n    github.com/syndtr/goleveldb => github.com/syndtr/goleveldb v1.0.1-0.20210819022825-2ae1ddf74ef7\n)\n")),(0,r.kt)("h3",{id:"install-dependensies"},"Install dependensies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"go mod tidy\n")),(0,r.kt)("h3",{id:"test-a-simple-function"},"Test a simple function"),(0,r.kt)("p",null,"You can refer to the ",(0,r.kt)("a",{parentName:"p",href:"/greenfield-docs/docs/tutorials/native-dapp/sdk/file-management/overview"},"overview")," to learn about how to create a simple ",(0,r.kt)("inlineCode",{parentName:"p"},"main.go")),(0,r.kt)("p",null,"If everything is set up correctly, your code will be able to connect to the Greenfield node and return the chain data as shown above."),(0,r.kt)("h3",{id:"account-setup-1"},"Account setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'account, err := types.NewAccountFromPrivateKey("test", privateKey)\n    if err != nil {\n        log.Fatalf("New account from private key error, %v", err)\n    }\n    cli, err := client.New(chainId, rpcAddr, client.Option{DefaultAccount: account})\n    if err != nil {\n        log.Fatalf("unable to new greenfield client, %v", err)\n    }\n    ctx := context.Background()\n\n')),(0,r.kt)("h3",{id:"create-buckets"},"Create Buckets"),(0,r.kt)("p",null,"Now, let's use the imported account to create a bucket."),(0,r.kt)("p",null,"In this example,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    // get storage providers list\n    spLists, err := cli.ListStorageProviders(ctx, true)\n    if err != nil {\n        log.Fatalf("fail to list in service sps")\n    }\n    // choose the first sp to be the primary SP\n    primarySP := spLists[0].GetOperatorAddress()\n\n    bucketName := storageTestUtil.GenRandomBucketName()\n\n    txHash, err := cli.CreateBucket(ctx, bucketName, primarySP, types.CreateBucketOptions{})\n    handleErr(err, "CreateBucket")\n    log.Printf("create bucket %s on SP: %s successfully \\n", bucketName, spLists[0].Endpoint)\n\n    waitForTx, _ := cli.WaitForTx(ctx, txHash)\n    log.Printf("Wait for tx: %s", waitForTx.TxResult.String())\n')),(0,r.kt)("p",null,"The example return message is like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'2023/10/31 13:14:54 create bucket ylatitsb on SP: https://gnfd-testnet-sp1.bnbchain.org successfully\n2023/10/31 13:14:54 Wait for tx: data:"\\0225\\n+/greenfield.storage.MsgCreateBucketResponse\\022\\006\\n\\0043175\\032\\010\\000\\000\\000\\000\\000\\000\\201\\006" log:"[{\\"msg_index\\":0,\\"events\\":[{\\"type\\":\\"message\\",\\"attributes\\":[{\\"key\\":\\"action\\",\\"value\\":\\"/greenfield.storage.MsgCreateBucket\\"},{\\"key\\":\\"sender\\",\\"value\\":\\"0x525482AB3922230e4D73079890dC905dCc3D37cd\\"},{\\"key\\":\\"module\\",\\"value\\":\\"storage\\"}]},{\\"type\\":\\"greenfield.storage.EventCreateBucket\\",\\"attributes\\":[{\\"key\\":\\"bucket_id\\",\\"value\\":\\"\\\\\\"3175\\\\\\"\\"},{\\"key\\":\\"bucket_name\\",\\"value\\":\\"\\\\\\"ylatitsb\\\\\\"\\"},{\\"key\\":\\"charged_read_quota\\",\\"value\\":\\"\\\\\\"0\\\\\\"\\"},{\\"key\\":\\"create_at\\",\\"value\\":\\"\\\\\\"1698779691\\\\\\"\\"},{\\"key\\":\\"global_virtual_group_family_id\\",\\"value\\":\\"40\\"},{\\"key\\":\\"owner\\",\\"value\\":\\"\\\\\\"0x525482AB3922230e4D73079890dC905dCc3D37cd\\\\\\"\\"},{\\"key\\":\\"payment_address\\",\\"value\\":\\"\\\\\\"0x525482AB3922230e4D73079890dC905dCc3D37cd\\\\\\"\\"},{\\"key\\":\\"primary_sp_id\\",\\"value\\":\\"1\\"},{\\"key\\":\\"source_type\\",\\"value\\":\\"\\\\\\"SOURCE_TYPE_ORIGIN\\\\\\"\\"},{\\"key\\":\\"status\\",\\"value\\":\\"\\\\\\"BUCKET_STATUS_CREATED\\\\\\"\\"},{\\"key\\":\\"visibility\\",\\"value\\":\\"\\\\\\"VISIBILITY_TYPE_PRIVATE\\\\\\"\\"}]}]}]" gas_wanted:2400 gas_used:2400 events:<type:"coin_spent" attributes:<key:"spender" value:"0x525482AB3922230e4D73079890dC905dCc3D37cd" index:true > attributes:<key:"amount" value:"12000000000000BNB" index:true > > events:<type:"coin_received" attributes:<key:"receiver" value:"0xf1829676DB577682E944fc3493d451B67Ff3E29F" index:true > attributes:<key:"amount" value:"12000000000000BNB" index:true > > events:<type:"transfer" attributes:<key:"recipient" value:"0xf1829676DB577682E944fc3493d451B67Ff3E29F" index:true > attributes:<key:"sender" value:"0x525482AB3922230e4D73079890dC905dCc3D37cd" index:true > attributes:<key:"amount" value:"12000000000000BNB" index:true > > events:<type:"message" attributes:<key:"sender" value:"0x525482AB3922230e4D73079890dC905dCc3D37cd" index:true > > events:<type:"tx" attributes:<key:"fee" value:"12000000000000BNB" index:true > attributes:<key:"fee_payer" value:"0x525482AB3922230e4D73079890dC905dCc3D37cd" index:true > > events:<type:"tx" attributes:<key:"acc_seq" value:"0x525482AB3922230e4D73079890dC905dCc3D37cd/70" index:true > > events:<type:"tx" attributes:<key:"signature" value:"aKL7wpB1b0107d1OleaHKKBw5mXUskggINbq7hsr90s6MzgV88DxjAGak37xz9V4LsoH0sr7saqBmBrE5MKJtgA=" index:true > > events:<type:"message" attributes:<key:"action" value:"/greenfield.storage.MsgCreateBucket" index:true > attributes:<key:"sender" value:"0x525482AB3922230e4D73079890dC905dCc3D37cd" index:true > attributes:<key:"module" value:"storage" index:true > > events:<type:"greenfield.storage.EventCreateBucket" attributes:<key:"bucket_id" value:"\\"3175\\"" index:true > attributes:<key:"bucket_name" value:"\\"ylatitsb\\"" index:true > attributes:<key:"charged_read_quota" value:"\\"0\\"" index:true > attributes:<key:"create_at" value:"\\"1698779691\\"" index:true > attributes:<key:"global_virtual_group_family_id" value:"40" index:true > attributes:<key:"owner" value:"\\"0x525482AB3922230e4D73079890dC905dCc3D37cd\\"" index:true > attributes:<key:"payment_address" value:"\\"0x525482AB3922230e4D73079890dC905dCc3D37cd\\"" index:true > attributes:<key:"primary_sp_id" value:"1" index:true > attributes:<key:"source_type" value:"\\"SOURCE_TYPE_ORIGIN\\"" index:true > attributes:<key:"status" value:"\\"BUCKET_STATUS_CREATED\\"" index:true > attributes:<key:"visibility" value:"\\"VISIBILITY_TYPE_PRIVATE\\"" index:true > >\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Query the bucket with ",(0,r.kt)("inlineCode",{parentName:"li"},"HeadBucket")," function")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    // head bucket\n    bucketInfo, err := cli.HeadBucket(ctx, bucketName)\n    handleErr(err, "HeadBucket")\n    log.Println("bucket info:", bucketInfo.String())\n')),(0,r.kt)("p",null,"The example return message is like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'2023/10/31 13:14:54 bucket info: owner:"0x525482AB3922230e4D73079890dC905dCc3D37cd" bucket_name:"ylatitsb" visibility:VISIBILITY_TYPE_PRIVATE id:"3175" create_at:1698779691 payment_address:"0x525482AB3922230e4D73079890dC905dCc3D37cd" global_virtual_group_family_id:40\n')),(0,r.kt)("h3",{id:"mirror-bucket-metadata-to-bsc"},"Mirror Bucket Metadata to BSC"),(0,r.kt)("p",null,"In Greenfield, object mirroring refers to the process of transferring control over objects stored on BNB Greenfield to a smart contract on BNB Smart Chain (BSC)"),(0,r.kt)("p",null,"This allows the object to be fully managed on-chain on BSC, meaning that users or other smart contracts can perform various operations and changes to the object through on-chain transactions."),(0,r.kt)("p",null,"During the mirroring process from BNB Greenfield to BSC, the content of the file itself is not copied. This means that neither the data nor the file metadata, which is stored on the BNB Greenfield blockchain, is transferred to BSC."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    // mirror bucket\n    txResp, err := cli.MirrorBucket(ctx, sdk.ChainID(crossChainDestBsChainId), bucketInfo.Id, bucketName, gnfdSdkTypes.TxOption{})\n    handleErr(err, "MirrorBucket")\n    waitForTx, _ = cli.WaitForTx(ctx, txResp.TxHash)\n    log.Printf("Wait for tx: %s", waitForTx.TxResult.String())\n    log.Printf("successfully mirrored bucket wiht bucket id %s to BSC", bucketInfo.Id)\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'2023/10/31 21:43:57 bucket: sdkexamplebucket policy info:id:"2358" principal:<type:PRINCIPAL_TYPE_GNFD_ACCOUNT value:"0x843e77D639b6C382e91ef489881963209cB238E5" > resource_type:RESOURCE_TYPE_BUCKET resource_id:"429" statements:<effect:EFFECT_ALLOW actions:ACTION_UPDATE_BUCKET_INFO actions:ACTION_DELETE_BUCKET actions:ACTION_DELETE_OBJECT actions:ACTION_GET_OBJECT >\n2023/10/31 21:43:57 bucket info: owner:"0x525482AB3922230e4D73079890dC905dCc3D37cd" bucket_name:"ylatitsb" visibility:VISIBILITY_TYPE_PRIVATE id:"3175" create_at:1698779691 payment_address:"0x525482AB3922230e4D73079890dC905dCc3D37cd" global_virtual_group_family_id:40\n')),(0,r.kt)("p",null,"You can also inspect using the block scanner, e.g. ",(0,r.kt)("a",{parentName:"p",href:"https://greenfieldscan.com/"},"https://greenfieldscan.com"),"."))}p.isMDXComponent=!0}}]);