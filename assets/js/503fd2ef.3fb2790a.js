"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[9723],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(t),u=o,h=d["".concat(s,".").concat(u)]||d[u]||p[u]||i;return t?a.createElement(h,r(r({ref:n},m),{},{components:t})):a.createElement(h,r({ref:n},m))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},82015:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const i={title:"Blockchain Command Line",index:!0,dir:{order:4}},r="Blockchain Command-Line Interface",l={unversionedId:"api/blockchain-cli/README",id:"api/blockchain-cli/README",title:"Blockchain Command Line",description:"Since Greenfield Command Line interface is derived from Cosmos, The majority of the content in this page is copied from the Cosmos SDK.",source:"@site/docs/api/blockchain-cli/README.md",sourceDirName:"api/blockchain-cli",slug:"/api/blockchain-cli/",permalink:"/greenfield-docs/docs/api/blockchain-cli/",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-docs/blob/main/docs/api/blockchain-cli/README.md",tags:[],version:"current",frontMatter:{title:"Blockchain Command Line",index:!0,dir:{order:4}},sidebar:"apiReferenceSidebar",previous:{title:"RPC Endpoints",permalink:"/greenfield-docs/docs/api/endpoints"},next:{title:"Key Management",permalink:"/greenfield-docs/docs/api/blockchain-cli/key-management"}},s={},c=[{value:"Transaction Command",id:"transaction-command",level:3},{value:"Query Commands",id:"query-commands",level:3},{value:"Environment variables",id:"environment-variables",level:2}],m={toc:c},d="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"blockchain-command-line-interface"},"Blockchain Command-Line Interface"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Since Greenfield Command Line interface is derived from Cosmos, The majority of the content in this page is copied from the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.cosmos.network/main/core/cli"},"Cosmos SDK"),".")),(0,o.kt)("p",null,"There is no set way to create a CLI, but Greenfield typically use the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/spf13/cobra"},"Cobra Library"),".\nBuilding a CLI with Cobra entails defining commands, arguments, and flags. Commands understand the\nactions users wish to take, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"tx")," for creating a transaction and ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," for querying the application.\nEach command can also have nested subcommands, necessary for naming the specific transaction type.\nUsers also supply ",(0,o.kt)("strong",{parentName:"p"},"Arguments"),", such as account numbers to send coins to, and flags to modify various\naspects of the commands, such as gas prices or which node to broadcast to."),(0,o.kt)("h3",{id:"transaction-command"},"Transaction Command"),(0,o.kt)("p",null,"Here is an example of a command a user might enter to interact with ",(0,o.kt)("inlineCode",{parentName:"p"},"gnfd")," in order to send some tokens:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ gnfd tx bank send $MY_VALIDATOR_ADDRESS $RECIPIENT 1000BNB --gas auto\n")),(0,o.kt)("p",null,"The first four strings specify the command:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The subcommand ",(0,o.kt)("inlineCode",{parentName:"li"},"tx"),", which contains all commands that let users create transactions."),(0,o.kt)("li",{parentName:"ul"},"The subcommand ",(0,o.kt)("inlineCode",{parentName:"li"},"bank")," to indicate which module to route the command to ",(0,o.kt)("inlineCode",{parentName:"li"},"x/bank")," module in this case."),(0,o.kt)("li",{parentName:"ul"},"The type of transaction ",(0,o.kt)("inlineCode",{parentName:"li"},"send"),".")),(0,o.kt)("p",null,"The next two strings are arguments: the ",(0,o.kt)("inlineCode",{parentName:"p"},"from_address")," the user wishes to send from, the ",(0,o.kt)("inlineCode",{parentName:"p"},"to_address")," of the recipient,\nand the ",(0,o.kt)("inlineCode",{parentName:"p"},"amount")," they want to send. Finally, the last few strings of the command are optional flags to indicate\nhow much the user is willing to pay in fees."),(0,o.kt)("h3",{id:"query-commands"},"Query Commands"),(0,o.kt)("p",null,"Queries are objects that allow users to retrieve information about the application's state. "),(0,o.kt)("p",null,"This ",(0,o.kt)("inlineCode",{parentName:"p"},"queryCommand")," function adds all the queries available to end-users for the application. This typically includes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"QueryTx")," and/or other transaction query commands from the ",(0,o.kt)("inlineCode",{parentName:"li"},"auth")," module which allow the user to search for a transaction by inputting its hash, a list of tags, or a block height. These queries allow users to see if transactions have been included in a block."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Account command")," from the ",(0,o.kt)("inlineCode",{parentName:"li"},"auth")," module, which displays the state (e.g. account balance) of an account given an address."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Validator command")," from the Cosmos SDK rpc client tools, which displays the validator set of a given height."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Block command")," from the Cosmos SDK rpc client tools, which displays the block data for a given height."),(0,o.kt)("li",{parentName:"ul"},"**All module query commands the application is dependent on,")),(0,o.kt)("p",null,"Here is an example of a ",(0,o.kt)("inlineCode",{parentName:"p"},"queryCommand"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"## query the metadata of BNB\n$ gnfd q bank  denom-metadata --node tcp://127.0.0.1:26750\n")),(0,o.kt)("h2",{id:"environment-variables"},"Environment variables"),(0,o.kt)("p",null,"Each flag is bound to its respective named environment variable. Then name of the environment variable consist of two parts "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"capital case ",(0,o.kt)("inlineCode",{parentName:"li"},"basename")," followed by flag name of the flag. ",(0,o.kt)("inlineCode",{parentName:"li"},"-")," must be substituted with ",(0,o.kt)("inlineCode",{parentName:"li"},"_"),". "),(0,o.kt)("li",{parentName:"ul"},"For example flag ",(0,o.kt)("inlineCode",{parentName:"li"},"--home")," for application with basename ",(0,o.kt)("inlineCode",{parentName:"li"},"GNFD")," is bound to ",(0,o.kt)("inlineCode",{parentName:"li"},"GNFD_HOME"),". It allows reducing\nthe amount of flags typed for routine operations. For example instead of:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'gnfd --home=./ --node=<node address> --chain-id="testchain-9000" --keyring-backend=test tx ... --from=<key name>\n')),(0,o.kt)("p",null,"this will be more convenient:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'# define env variables in .env, .envrc etc\nGNFD_HOME=<path to home>\nGNFD_NODE=<node address>\nGNFD_CHAIN_ID="testchain-9000"\nGNFD_KEYRING_BACKEND="test"\n\n# and later just use\ngnfd tx ... --from=<key name>\n')))}p.isMDXComponent=!0}}]);