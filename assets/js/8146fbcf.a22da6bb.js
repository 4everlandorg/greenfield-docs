"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[3849],{65488:(e,a,n)=>{n.d(a,{Z:()=>p});var t=n(87462),r=n(67294),l=n(86010),i=n(72389),o=n(67392),s=n(7094),c=n(12466);const d={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function u(e){const{lazy:a,block:n,defaultValue:i,values:u,groupId:p,className:m}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=u??h.map((e=>{let{props:{value:a,label:n,attributes:t}}=e;return{value:a,label:n,attributes:t}})),k=(0,o.l)(g,((e,a)=>e.value===a.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===i?i:i??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==f&&!g.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:y}=(0,s.U)(),[_,v]=(0,r.useState)(f),N=[],{blockElementScrollPositionUntilNextRender:w}=(0,c.o5)();if(null!=p){const e=b[p];null!=e&&e!==_&&g.some((a=>a.value===e))&&v(e)}const C=e=>{const a=e.currentTarget,n=N.indexOf(a),t=g[n].value;t!==_&&(w(a),v(t),null!=p&&y(p,String(t)))},T=e=>{let a=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const n=N.indexOf(e.currentTarget)+1;a=N[n]??N[0];break}case"ArrowLeft":{const n=N.indexOf(e.currentTarget)-1;a=N[n]??N[N.length-1];break}}a?.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",d.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},m)},g.map((e=>{let{value:a,label:n,attributes:i}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:_===a?0:-1,"aria-selected":_===a,key:a,ref:e=>N.push(e),onKeyDown:T,onClick:C},i,{className:(0,l.Z)("tabs__item",d.tabItem,i?.className,{"tabs__item--active":_===a})}),n??a)}))),a?(0,r.cloneElement)(h.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==_})))))}function p(e){const a=(0,i.Z)();return r.createElement(u,(0,t.Z)({key:String(a)},e))}},36698:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var t=n(87462),r=(n(67294),n(3905)),l=n(65488),i=n(85162);const o={title:"Run Relayer",order:5},s=void 0,c={unversionedId:"guide/greenfield-blockchain/run-node/run-relayer",id:"guide/greenfield-blockchain/run-node/run-relayer",title:"Run Relayer",description:"Prerequisites",source:"@site/docs/guide/greenfield-blockchain/run-node/run-relayer.md",sourceDirName:"guide/greenfield-blockchain/run-node",slug:"/guide/greenfield-blockchain/run-node/run-relayer",permalink:"/greenfield-docs/docs/guide/greenfield-blockchain/run-node/run-relayer",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-docs/blob/main/docs/guide/greenfield-blockchain/run-node/run-relayer.md",tags:[],version:"current",frontMatter:{title:"Run Relayer",order:5},sidebar:"guideSidebar",previous:{title:"Run Node",permalink:"/greenfield-docs/docs/guide/greenfield-blockchain/run-node/"},next:{title:"Run Challenger",permalink:"/greenfield-docs/docs/guide/greenfield-blockchain/run-node/run-challenger"}},d={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Recommended Hardware",id:"recommended-hardware",level:3},{value:"Key Preparation",id:"key-preparation",level:3},{value:"Prepare binary",id:"prepare-binary",level:2},{value:"Config",id:"config",level:2},{value:"Build",id:"build",level:2},{value:"Run",id:"run",level:2},{value:"Create DB Schema",id:"create-db-schema",level:3},{value:"Start Relayer",id:"start-relayer",level:3}],p={toc:u},m="wrapper";function h(e){let{components:a,...n}=e;return(0,r.kt)(m,(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("h3",{id:"recommended-hardware"},"Recommended Hardware"),(0,r.kt)("p",null,"The following lists the recommended hardware requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Hardware Requirements: Desktop or laptop hardware running recent versions of Mac OS X, or Linux."),(0,r.kt)("li",{parentName:"ul"},"CPU: 4 cores"),(0,r.kt)("li",{parentName:"ul"},"RAM: 4 GB"),(0,r.kt)("li",{parentName:"ul"},"Relational database: Mysql")),(0,r.kt)("h3",{id:"key-preparation"},"Key Preparation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Relayer private key: This is the account which is used to relay transaction between Greenfield and the BSC. Ensure it has balance on both Blockchain network."),(0,r.kt)("li",{parentName:"ul"},"Bls private key: Used to create bls signature for cross-chain package.")),(0,r.kt)("p",null,"These two keys refer to ",(0,r.kt)("inlineCode",{parentName:"p"},"validator_relayer")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"validator_bls")," created in ",(0,r.kt)("a",{parentName:"p",href:"/greenfield-docs/docs/guide/greenfield-blockchain/run-node/become-validator"},"become-validator")," step 2."),(0,r.kt)("p",null,"You can retrieve them with the following commands."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"gnfd keys export validator_relayer --unarmored-hex --unsafe --keyring-backend test\n\ngnfd keys export validator_bls --unarmored-hex --unsafe --keyring-backend test\n")),(0,r.kt)("h2",{id:"prepare-binary"},"Prepare binary"),(0,r.kt)("p",null,"Get the greenfield-relayer app by running the following command in your terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone --branch \"$(curl -s https://api.github.com/repos/bnb-chain/greenfield-relayer/releases/latest  | jq -r '.tag_name')\" https://github.com/bnb-chain/greenfield-relayer.git\ncd greenfield-relayer\n")),(0,r.kt)("h2",{id:"config"},"Config"),(0,r.kt)("p",null,"Modify ",(0,r.kt)("inlineCode",{parentName:"p"},"config/config.json"),". Or, you can create a new one and specify the config path by ",(0,r.kt)("inlineCode",{parentName:"p"},"--config-path")," flag when start the relayer."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"For Testnet config, refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/bnb-chain-charts/blob/master/gnfd-relayer-testnet-values/values.yaml#L4"},"Testnet configure"),".\nYou can use it as a template for your Mainnet config by adapting a few changes as illustrated below.")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Set relayer private key and bls private key import method (via file or aws secret) and keys, the block monitoring start heights."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'  "greenfield_config": {\n    "key_type": "local_private_key", // or "aws_private_key" if you are using aws secret manager.\n     ...\n    "aws_bls_secret_name": "",\n    "private_key": "your_private_key", // this is the relayer private key for relaying transaction.\n    "bls_private_key": "your_private_key", // this is the bls key for signing crosschain package.\n    "rpc_addrs": [\n      "https://greenfield-chain.bnbchain.org:443"\n     ]\n    "chain_id": 1017,\n     ...\n    "start_height": 1,  // please change to the current block height of Greenfield network.\n    "chain_id_string": "greenfield_1017-1"\n  }, \n  "bsc_config": {\n    "key_type": "local_private_key",  // or "aws_private_key" if you are using aws secret manager.\n    ...\n    "rpc_addrs": [\n       "BSC_RPC"\n    ],\n    "private_key": "your_private_key", // same as the above one in greenfield_congfig.\n    "gas_limit": 20000000,\n    "gas_price": 3000000001,\n    ...\n    "start_height": 0,   // please change to the current block height of BSC network.\n    "chain_id": 56\n  }\n')),(0,r.kt)("p",{parentName:"li"},"Note:\nRefer to ",(0,r.kt)("a",{parentName:"p",href:"/greenfield-docs/docs/api/endpoints"},"Greenfield Endpoints")," for Greenfield RPC address,\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.bscscan.com/misc-tools-and-utilities/public-rpc-nodes"},"BSC Endpoints")," for BSC RPC address, and use the appropriate ones based on your location."),(0,r.kt)("p",{parentName:"li"},"You might encounter ",(0,r.kt)("inlineCode",{parentName:"p"},"Rate limit")," issue for using official BSC endpoints, we would highly recommend using 3rd Party RPCs, like the ",(0,r.kt)("a",{parentName:"p",href:"https://nodereal.io/meganode"},"NodeReal MegaNode"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Config crossChain, greenfield light client and relayer hub smart contracts addresses, others can keep the default value, refer to this\n",(0,r.kt)("a",{parentName:"p",href:"/greenfield-docs/docs/tutorials/dapp/contract-list"},"contract-list")," to get addresses for Mainnet/Testnet."))),(0,r.kt)(l.Z,{defaultValue:"mainnet",values:[{label:"Mainnet",value:"mainnet"},{label:"Testnet",value:"testnet"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"mainnet",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"relay_config": {\n    ... \n    "cross_chain_contract_addr": "0x77e719b714be09F70D484AB81F70D02B0E182f7d",\n    "greenfield_light_client_contract_addr": "0x433bB48Bd86c089375e53b2E2873A9C4bC0e986B",\n    "relayer_hub_contract_addr": "0x31C477F05CE58bB81A9FB4b8c00560f1cBe185d1"\n  }\n'))),(0,r.kt)(i.Z,{value:"testnet",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"relay_config": {\n    ... \n    "cross_chain_contract_addr": "0xa5B2c9194131A4E0BFaCbF9E5D6722c873159cb7",\n    "greenfield_light_client_contract_addr": "0xa9249cefF9cBc9BAC0D9167b79123b6C7413F50a",\n    "relayer_hub_contract_addr": "0x91cA83d95c8454277d1C297F78082B589e6E4Ea3"\n  }\n')))),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Config the database settings.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'   "db_config": {\n     "dialect": "mysql",\n     "key_type": "local_private_key",\n     "aws_region": "",\n     "aws_secret_name": "",\n     "password": "${pass}",\n     "username": "${user}",\n     "url": "tcp(${host})/greenfield-relayer?charset=utf8&parseTime=True&loc=Local",\n     "max_idle_conns": 10,\n     "max_open_conns": 100\n   }\n')),"Please replace ",(0,r.kt)("inlineCode",{parentName:"li"},"${pass}"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"${user}"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"${host}")," with your Mysql instance credential and host. ")),(0,r.kt)("h2",{id:"build"},"Build"),(0,r.kt)("p",null,"Build the binary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"make build\n")),(0,r.kt)("p",null,"Or"),(0,r.kt)("p",null,"Build docker image:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"make build_docker\n")),(0,r.kt)("h2",{id:"run"},"Run"),(0,r.kt)("h3",{id:"create-db-schema"},"Create DB Schema"),(0,r.kt)("p",null,"Make sure the database instance is running."),(0,r.kt)("p",null,"Create schema by MySQL client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"CREATE SCHEMA IF NOT EXISTS `greenfield-relayer` DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n")),(0,r.kt)("h3",{id:"start-relayer"},"Start Relayer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"./build/greenfield-relayer --config-type [local or aws] --config-path config_file_path  --aws-region [aws region or omit] --aws-secret-key [aws secret key for config or omit]\n")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"./build/greenfield-relayer --config-type local --config-path config/config.json\n")),(0,r.kt)("p",null,"Run docker:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},'docker run -it -v /your/data/path:/greenfield-relayer -e CONFIG_TYPE="local" -e CONFIG_FILE_PATH=/your/config/file/path/in/container -d greenfield-relayer\n')),(0,r.kt)("p",null,"Or you can deploy the greenfield relayer application using Helm Chart V3. Please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/greenfield/blob/master/deployment/helm/relayer-readme.md"},"relayer-readme"),"."))}h.isMDXComponent=!0}}]);