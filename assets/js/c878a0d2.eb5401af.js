"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[8276],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),d=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(i.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),f=a,g=p["".concat(i,".").concat(f)]||p[f]||u[f]||o;return t?r.createElement(g,l(l({ref:n},c),{},{components:t})):r.createElement(g,l({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=f;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var d=2;d<o;d++)l[d]=t[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},20688:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=t(87462),a=(t(67294),t(3905));const o={title:"Run Local SP Network",order:2},l=void 0,s={unversionedId:"guide/storage-provider/run-book/run-local-SP-network",id:"guide/storage-provider/run-book/run-local-SP-network",title:"Run Local SP Network",description:"This guide helps you to set up a local Greenfield Storage Provider network for testing",source:"@site/docs/guide/storage-provider/run-book/run-local-SP-network.md",sourceDirName:"guide/storage-provider/run-book",slug:"/guide/storage-provider/run-book/run-local-SP-network",permalink:"/greenfield-docs/docs/guide/storage-provider/run-book/run-local-SP-network",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-docs/blob/master/docs/guide/storage-provider/run-book/run-local-SP-network.md",tags:[],version:"current",frontMatter:{title:"Run Local SP Network",order:2},sidebar:"guideSidebar",previous:{title:"SP Compiling and Dependencies",permalink:"/greenfield-docs/docs/guide/storage-provider/run-book/compile-dependences"},next:{title:"Run Testnet SP Node",permalink:"/greenfield-docs/docs/guide/storage-provider/run-book/run-testnet-SP-node"}},i={},d=[{value:"Recommended Prerequisites",id:"recommended-prerequisites",level:2},{value:"Quickly setup local Greenfield Blockchain network",id:"quickly-setup-local-greenfield-blockchain-network",level:2},{value:"Setup local SP network",id:"setup-local-sp-network",level:2}],c={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This guide helps you to set up a local Greenfield Storage Provider network for testing\nand other development related purposes."),(0,a.kt)("h2",{id:"recommended-prerequisites"},"Recommended Prerequisites"),(0,a.kt)("p",null,"The following lists the recommended hardware requirements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"VPS running recent versions of Mac OS X, Linux, or Windows\uff1b"),(0,a.kt)("li",{parentName:"ul"},"16 cores of CPU, 64 GB of memory(RAM);"),(0,a.kt)("li",{parentName:"ul"},"At least 100GB disk space for backend storage;"),(0,a.kt)("li",{parentName:"ul"},"10GB+ SQL Database.")),(0,a.kt)("h2",{id:"quickly-setup-local-greenfield-blockchain-network"},"Quickly setup local Greenfield Blockchain network"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Build Greenfield Blockchain")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note")," Greenfield blockchain uses a lib which uses ",(0,a.kt)("inlineCode",{parentName:"p"},"cgo"),", so you should set ",(0,a.kt)("inlineCode",{parentName:"p"},"cgo env var"),"; in addition, you should install ",(0,a.kt)("inlineCode",{parentName:"p"},"gcc")," compiler in your OS."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/bnb-chain/greenfield.git\ncd greenfield/\nexport CGO_ENABLED=1\nmake build\n")),(0,a.kt)("p",null,"If you encoutered the following error messages while compiling greenfield blockchain, you should install ",(0,a.kt)("inlineCode",{parentName:"p"},"glibc-static")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"libstdc++-static"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# command-line-arguments\n/usr/local/go/pkg/tool/linux_amd64/link: running gcc failed: exit status 1\n/bin/ld: cannot find -lstdc++\ncollect2: error: ld returned 1 exit status\n\nmake: *** [build] Error 1\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Start Greenfield Blockchain")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# 1 validator and 7 storage providers\nbash ./deployment/localup/localup.sh all 1 7\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Export the keys of sps")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'bash ./deployment/localup/localup.sh export_sps 1 7\n\n# result example\n# {\n#   "sp0": {\n#     "OperatorAddress": "0x14539343413EB47899B0935287ab1111Df891d04",\n#     "FundingAddress": "0x21c6ff21DD7012DE1CCf9055f2eB234A44a1d3fB",\n#     "SealAddress": "0x8e424c6Db42Ad9A5d91b24e20b5f603eC70abbA3",\n#     "ApprovalAddress": "0x7Aa5C8B50696f1D15B3A60d6629f7318c605bb4C",\n#     "GcAddress": "0xfa238a4B262e1dc35c4970A2296A2444B956c9Ca",\n#     "OperatorPrivateKey": "ba6e97958d9c43d1ad54923eba99f8d59f54a0c66c78a5dcbc004c5c3ec72f8c",\n#     "FundingPrivateKey": "bd9d9e7823cd2dc7bc20f1b6676c3025cdda6cf5a8df9b04597fdff42c29af01",\n#     "SealPrivateKey": "aacd6b834627fdbc5de2bfdb1db31be0ea810a941854787653814c8040a9dd39",\n#     "ApprovalPrivateKey": "32108ed1a47c0af965824f84ac2162c029f347eec6d0988e642330b0ac264c85",\n#     "GcPrivateKey": "2fad16031b4fd9facb7dacda3da4ca4dd5f005f4166891bf9f7be13e02abb12d"\n#   }\n#   ...\n# }\n')),(0,a.kt)("p",null,"These JSON data will be used for setup local SP network, so you'd better save it as a json file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"bash ./deployment/localup/localup.sh export_sps 1 7 > sp.json\n")),(0,a.kt)("h2",{id:"setup-local-sp-network"},"Setup local SP network"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Compile SP")),(0,a.kt)("p",null,"Users who want to compile SP can refer this ",(0,a.kt)("a",{parentName:"p",href:"/greenfield-docs/docs/guide/storage-provider/run-book/compile-dependences#compile-sp"},"doc"),"."),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Generate localup env")),(0,a.kt)("p",null,"Use the following instruction to generate template config file, sp.info and db.info in seven different directories. This command is used for generating sp env the first time or regenerating sp env."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# This command accepts four args, the first arg is json file path that only supports absolute path, the second arg is db user name,\n# the third arg is db password and the fourth arg is db address.\ncd greenfield-storage-provider/\nbash ./deployment/localup/localup.sh --generate json_file_path db_username db_password db_address\n")),(0,a.kt)("p",null,"The json file path accepted for the first arg is generated by ",(0,a.kt)("a",{parentName:"p",href:"#quickly-setup-local-greenfield-blockchain-network"},"quickly setup local greenfield blockchain network step3"),"."),(0,a.kt)("p",null,"View directory structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"ls deployment/localup/local_env/sp0\n\u251c\u2500\u2500 sp0\n\u2502\xa0\xa0 \u251c\u2500\u2500 config.toml   # generated template config file\n\u2502\xa0\xa0 \u251c\u2500\u2500 db.info       # generated db.info is used for config.toml\n\u2502\xa0\xa0 \u251c\u2500\u2500 gnfd-sp0      # gnfd-sp binary\n\u2502\xa0\xa0 \u2514\u2500\u2500 sp.info       # generated sp.info is used for config.toml\n\u251c\u2500\u2500 sp1\n\u251c\u2500\u2500 ...\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'# An example for generating local sp env\ncd greenfield-storage-provider/\nbash ./deployment/localup/localup.sh --generate /root/sp.json root greenfield localhost:3306\n\n[root@yourmachine sp0]# cat db.info\n#!/usr/bin/env bash\nUSER="root"                     # database username\nPWD="greenfield"                # database password\nADDRESS="localhost:3306"        # db endpoint, e.g. "localhost:3306"\nDATABASE="sp_0"                 # database name\n\n[root@yourmachine sp0]# cat sp.info\n#!/usr/bin/env bash\nSP_ENDPOINT="127.0.0.1:9033"                                                              # gateway endpoint, e.g. "127.0.0.1:9033"\nOPERATOR_ADDRESS="0x14539343413EB47899B0935287ab1111Df891d04"                             # OperatorAddr is generated in setup local Greenfield blockchain step 3.\nOPERATOR_PRIVATE_KEY="ba6e97958d9c43d1ad54923eba99f8d59f54a0c66c78a5dcbc004c5c3ec72f8c"   # OperatorPrivKey is generated in setup local Greenfield blockchain step 3.\nFUNDING_PRIVATE_KEY="bd9d9e7823cd2dc7bc20f1b6676c3025cdda6cf5a8df9b04597fdff42c29af01"    # FundingPrivKey is generated in setup local Greenfield blockchain step 3.\nSEAL_PRIVATE_KEY="aacd6b834627fdbc5de2bfdb1db31be0ea810a941854787653814c8040a9dd39"       # SealPrivKey is generated in setup local Greenfield blockchain step 3.\nAPPROVAL_PRIVATE_KEY="32108ed1a47c0af965824f84ac2162c029f347eec6d0988e642330b0ac264c85"   # ApprovalPrivKey is generated in setup local Greenfield blockchain step 3.\nGC_PRIVATE_KEY="2fad16031b4fd9facb7dacda3da4ca4dd5f005f4166891bf9f7be13e02abb12d"         # GcPrivateKey is generated in setup local Greenfield blockchain step 3.\n')),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Start Seven SPs")),(0,a.kt)("p",null,"Make config.toml according to db.info, sp.info and start seven sps."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cd greenfield-storage-provider/\nbash ./deployment/localup/localup.sh --reset\nbash ./deployment/localup/localup.sh --start\n")),(0,a.kt)("p",null,"The environment directory is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"deployment/localup/local_env/\n\u251c\u2500\u2500 sp0\n\u2502\xa0\xa0 \u251c\u2500\u2500 config.toml    # real config\n\u2502\xa0\xa0 \u251c\u2500\u2500 data/          # piecestore data directory\n\u2502\xa0\xa0 \u251c\u2500\u2500 db.info\n\u2502\xa0\xa0 \u251c\u2500\u2500 gnfd-sp0\n\u2502\xa0\xa0 \u251c\u2500\u2500 gnfd-sp.log    # gnfd-sp log file\n\u2502\xa0\xa0 \u251c\u2500\u2500 log.txt\n\u2502\xa0\xa0 \u2514\u2500\u2500 sp.info\n\u251c\u2500\u2500 sp1\n\u251c\u2500\u2500 ...\n")),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"Supported commands")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'# this command should be executed in greenfield-storage-provider/ directory.\nbash ./deployment/localup/localup.sh --help\n\nUsage: deployment/localup/localup.sh [option...] {help|generate|reset|start|stop|print}\n\n   --help            display help info\n   --generate        generate sp.info and db.info that accepts four args: the first arg is json file path, the second arg is db username, the third arg is db password and the fourth arg is db address\n   --reset           reset env\n   --start           start storage providers\n   --stop            stop storage providers\n   --clean           clean local sp env"\n   --print           print sp local env work directory\n')),(0,a.kt)("ol",{start:6},(0,a.kt)("li",{parentName:"ol"},"Supplement")),(0,a.kt)("p",null,"If users want to modify config.toml in different sp directories or recompile gnfd-sp binary file, you can use the following commands to reset and start local sp:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cd greenfield-storage-provider/\nbash ./deployment/localup/localup.sh --reset\nbash ./deployment/localup/localup.sh --start\n")))}u.isMDXComponent=!0}}]);