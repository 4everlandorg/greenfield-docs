"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[8869],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),g=s(n),h=i,u=g["".concat(c,".").concat(h)]||g[h]||p[h]||a;return n?r.createElement(u,l(l({ref:t},d),{},{components:n})):r.createElement(u,l({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[g]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},44235:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const a={title:"Challenge",order:10},l="Challenge",o={unversionedId:"guide/storage-provider/services/challenge",id:"guide/storage-provider/services/challenge",title:"Challenge",description:"It is always the first priority of any decentralized storage network to guarantee data integrity and availability.",source:"@site/docs/guide/storage-provider/services/challenge.md",sourceDirName:"guide/storage-provider/services",slug:"/guide/storage-provider/services/challenge",permalink:"/greenfield-docs/docs/guide/storage-provider/services/challenge",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-docs/blob/main/docs/guide/storage-provider/services/challenge.md",tags:[],version:"current",frontMatter:{title:"Challenge",order:10},sidebar:"guideSidebar",previous:{title:"Downloader",permalink:"/greenfield-docs/docs/guide/storage-provider/services/downloader"},next:{title:"Garbage Collection",permalink:"/greenfield-docs/docs/guide/storage-provider/services/gc"}},c={},s=[{value:"Overview",id:"overview",level:2},{value:"PieceKey Encoder",id:"piecekey-encoder",level:3},{value:"PieceStore Lib",id:"piecestore-lib",level:3},{value:"Integrity Hash Queryer",id:"integrity-hash-queryer",level:3},{value:"SP DB Lib",id:"sp-db-lib",level:3},{value:"Challenge Piece Workflow",id:"challenge-piece-workflow",level:2},{value:"protocol",id:"protocol",level:2},{value:"RPC Interface",id:"rpc-interface",level:3},{value:"SP DB Interface",id:"sp-db-interface",level:3}],d={toc:s},g="wrapper";function p(e){let{components:t,...a}=e;return(0,i.kt)(g,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"challenge"},"Challenge"),(0,i.kt)("p",null,"It is always the first priority of any decentralized storage network to guarantee data integrity and availability.\nWe use data challenge instead of storage proof to get better HA. There will be some data challenges to random\npieces on greenfield chain continuously. And the SP, which stores the challenged piece, uses the challenge workflow\nto response. Each SP splits the object payload data to segments, and store segment data to piece store and store\nsegment checksum to SP DB."),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(76332).Z,width:"932",height:"578"})),(0,i.kt)("div",{style:{textAlign:"center"}},(0,i.kt)("i",null,"Challenge Architecture")),(0,i.kt)("h3",{id:"piecekey-encoder"},"PieceKey Encoder"),(0,i.kt)("p",null,"According to the challenge information, encode into segment piece key or ec piece key."),(0,i.kt)("h3",{id:"piecestore-lib"},"PieceStore Lib"),(0,i.kt)("p",null,"Access the underlying piece storage, which may be different types of storage, such as local files, remote object storage, etc."),(0,i.kt)("h3",{id:"integrity-hash-queryer"},"Integrity Hash Queryer"),(0,i.kt)("p",null,"Query the integrity hash and Piece Hash information stored in this SP for the corresponding Object."),(0,i.kt)("h3",{id:"sp-db-lib"},"SP DB Lib"),(0,i.kt)("p",null,"Lib for accessing the underlying SP DB currently supports MySQL and may adapt to more underlying indexing services in the future."),(0,i.kt)("h2",{id:"challenge-piece-workflow"},"Challenge Piece Workflow"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Receives the Challenge request from the Gateway."),(0,i.kt)("li",{parentName:"ul"},"Returns all piece data checksums and challenge piece data payload to the Gateway service.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Retrieve all piece data checksums from the SP DB."),(0,i.kt)("li",{parentName:"ul"},"Get the challenge piece data from the piece store.")))),(0,i.kt)("h2",{id:"protocol"},"protocol"),(0,i.kt)("h3",{id:"rpc-interface"},"RPC Interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"// ChallengePieceRequest is request type for the ChallengePiece RPC method.\nmessage ChallengePieceRequest {\n  // object_id defines the challenge object id\n  uint64 object_id = 1;\n  // segment_idx defines the challenge segment idx\n  uint32 segment_idx = 2;\n  // redundancy_idx defines the challenge redundancy idx\n  // It is useless iff < 0, and as ec index iff > 0\n  int32 redundancy_idx = 3;\n}\n\n// ChallengePieceResponse is response type for the ChallengePiece RPC method.\nmessage ChallengePieceResponse {\n  // piece_data defines the challenge segment data\n  bytes piece_data = 1;\n  // integrity_hash defines the integrity hash of the challenge replicate payload\n  bytes integrity_hash = 2;\n  // piece_hash defines the checksum of the challenge segment\n  repeated bytes piece_hash = 3;\n}\n")),(0,i.kt)("h3",{id:"sp-db-interface"},"SP DB Interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},"// IntegrityMeta defines the payload integrity hash and piece checksum with objectID\ntype IntegrityMeta struct {\n    ObjectID      uint64\n    Checksum      [][]byte\n    IntegrityHash []byte\n    Signature     []byte\n}\n// ObjectIntegrity abstract object integrity interface\ntype ObjectIntegrity interface {\n    // GetObjectIntegrity get integrity meta info by object id\n    GetObjectIntegrity(objectID uint64) (*IntegrityMeta, error)\n}\n")))}p.isMDXComponent=!0},76332:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/07-SP-Challenge-31e561e2a13b4f665a2837a57927d2c4.jpg"}}]);