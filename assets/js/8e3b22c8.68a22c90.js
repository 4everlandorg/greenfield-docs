"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[9095],{15514:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={title:"Go SDK Example"},i="Quickstart",l={unversionedId:"sdks/sdk-go",id:"sdks/sdk-go",title:"Go SDK Example",description:"The Greenfield SDK for Go provides APIs and utilities that developers can use to build Go applications that use Greenfield services, such as data storage and permission management.",source:"@site/docs/sdks/sdk-go.md",sourceDirName:"sdks",slug:"/sdks/sdk-go",permalink:"/greenfield-docs/docs/sdks/sdk-go",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-docs/blob/main/docs/sdks/sdk-go.md",tags:[],version:"current",frontMatter:{title:"Go SDK Example"},sidebar:"apiReferenceSidebar",previous:{title:"SDKs",permalink:"/greenfield-docs/docs/sdks/"},next:{title:"Javascript SDK Example",permalink:"/greenfield-docs/docs/sdks/sdk-js"}},s={},c=[{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Create client",id:"create-client",level:3},{value:"Queries",id:"queries",level:3},{value:"1. Get Current Chain Head",id:"1-get-current-chain-head",level:4},{value:"2. Get Address Balance",id:"2-get-address-balance",level:4},{value:"3. Query Storage Providers",id:"3-query-storage-providers",level:4},{value:"4. Query Storage Price",id:"4-query-storage-price",level:4},{value:"5. Query Buckets",id:"5-query-buckets",level:4},{value:"5. Query Objects",id:"5-query-objects",level:4},{value:"Transactions",id:"transactions",level:3},{value:"1. Manage Wallet",id:"1-manage-wallet",level:4},{value:"Make A Storage Deal",id:"make-a-storage-deal",level:3},{value:"1. Create a <code>storage.go</code> file",id:"1-create-a-storagego-file",level:4},{value:"2. Choose SP",id:"2-choose-sp",level:4},{value:"3. Create Buckets",id:"3-create-buckets",level:4},{value:"4. Upload Objects",id:"4-upload-objects",level:4},{value:"Object Management",id:"object-management",level:3},{value:"1. Read Object",id:"1-read-object",level:4},{value:"2. Update Object Visibility",id:"2-update-object-visibility",level:4},{value:"3. Delete Object",id:"3-delete-object",level:4},{value:"Greenfield Client Documentation",id:"greenfield-client-documentation",level:2},{value:"Usage",id:"usage-1",level:3},{value:"API Documentation",id:"api-documentation",level:3},{value:"Code Repository",id:"code-repository",level:2},{value:"More info",id:"more-info",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quickstart"},"Quickstart"),(0,r.kt)("p",null,"The Greenfield SDK for Go provides APIs and utilities that developers can use to build Go applications that use Greenfield services, such as data storage and permission management."),(0,r.kt)("p",null,"The SDK simplifies the process of programming directly with a web service interface. It takes care of many underlying details, including authentication, retrying requests, and managing errors."),(0,r.kt)("p",null,"This guide provides configuration information, sample code, and an introduction to the SDK utilities."),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("p",null,"The Greenfield SDK for Go requires ",(0,r.kt)("a",{parentName:"p",href:"https://go.dev/"},"Go 1.20 or later"),".You can view your current version of Go by running the go version command. For information about installing or upgrading your version of Go, see ",(0,r.kt)("a",{parentName:"p",href:"https://golang.org/doc/install"},"https://golang.org/doc/install"),"."),(0,r.kt)("p",null,"To install the SDK and its dependencies, run the following Go command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ go get github.com/bnb-chain/greenfield-go-sdk\n")),(0,r.kt)("p",null,"Edit go.mod to replace dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"replace (\n    cosmossdk.io/api => github.com/bnb-chain/greenfield-cosmos-sdk/api v0.0.0-20230425074444-eb5869b05fe9\n    cosmossdk.io/math => github.com/bnb-chain/greenfield-cosmos-sdk/math v0.0.0-20230425074444-eb5869b05fe9\n    github.com/cometbft/cometbft => github.com/bnb-chain/greenfield-cometbft v0.0.2\n    github.com/cometbft/cometbft-db => github.com/bnb-chain/greenfield-cometbft-db v0.8.1-alpha.1\n    github.com/cosmos/cosmos-sdk => github.com/bnb-chain/greenfield-cosmos-sdk v0.2.3\n    github.com/cosmos/iavl => github.com/bnb-chain/greenfield-iavl v0.20.1-alpha.1\n    github.com/syndtr/goleveldb => github.com/syndtr/goleveldb v1.0.1-0.20210819022825-2ae1ddf74ef7\n)\n")),(0,r.kt)("p",null,"Install dependensies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"go mod tidy\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Now we\u2019re ready to connect to Greenfield testnet and interact with the Greenfield APIs. Let\u2019s write a simple script to query the Greenfield version to verify if everything works as expected."),(0,r.kt)("h3",{id:"create-client"},"Create client"),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"main.go")," file in your project and add the following code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "log"\n\n    "github.com/bnb-chain/greenfield-go-sdk/client"\n    "github.com/bnb-chain/greenfield-go-sdk/types"\n)\n\nconst (\n    privateKey  = ""\n    \n    // Mainnet Info\n    rpcAddr     = "https://greenfield-chain.bnbchain.org:443"\n    chainId     = "greenfield_1017-1"\n    \n    // Testnet Info\n    // rpcAddr     = "https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org:443"\n    // chainId     = "greenfield_5600-1"\n    \n)\n\nfunc main() {\n    // import acccount\n    account, err := types.NewAccountFromPrivateKey("test", privateKey)\n    if err != nil {\n        log.Fatalf("New account from private key error, %v", err)\n    }\n\n    // create client\n    cli, err := client.New(chainId, rpcAddr, client.Option{DefaultAccount: account})\n    if err != nil {\n        log.Fatalf("unable to new greenfield client, %v", err)\n    }\n    ctx := context.Background()\n\n    // get node info from RPC\n    nodeInfo, versionInfo, err := cli.GetNodeInfo(ctx)\n    if err != nil {\n        log.Fatalf("unable to get node info, %v", err)\n    }\n    log.Printf("nodeInfo moniker: %s, go version: %s", nodeInfo.Moniker, versionInfo.GoVersion)\n\n    // query latest block height\n    height, err := cli.GetLatestBlockHeight(ctx)\n    if err != nil {\n        log.Fatalf("unable to get latest block height, %v", err)\n    }\n\n    log.Printf("Current block height: %d", height)\n}\n')),(0,r.kt)("p",null,"Run the following command in your project directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go run main.go\n")),(0,r.kt)("p",null,"This will output something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"2023/06/22 10:44:16 nodeInfo moniker: validator-a, go version: go version go1.20.4 linux/amd64\n2023/06/22 10:44:16 Current block height: 817082\n")),(0,r.kt)("p",null,"If everything is set up correctly, your code will be able to connect to the Greenfield node and return the chain data as shown above."),(0,r.kt)("h3",{id:"queries"},"Queries"),(0,r.kt)("p",null,"In the previous step, we created a ",(0,r.kt)("inlineCode",{parentName:"p"},"main.go")," file to demonstrate the basic steps to connect to the node and initialize a ",(0,r.kt)("inlineCode",{parentName:"p"},"Client")," to query chain data. Next, let\u2019s use some more functions."),(0,r.kt)("h4",{id:"1-get-current-chain-head"},"1. Get Current Chain Head"),(0,r.kt)("p",null,"We can add the following code in",(0,r.kt)("inlineCode",{parentName:"p"},"main.go"),"to query current head of the chain."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'  // query latest block height\n  blockByHeight, err := cli.GetBlockByHeight(ctx,height)\n    if err != nil {\n        log.Fatalf("unable to get block by height, %v", err)\n    }\n    log.Printf("Current block height: %d", blockByHeight.GetHeader())\n')),(0,r.kt)("h4",{id:"2-get-address-balance"},"2. Get Address Balance"),(0,r.kt)("p",null,"With a given greenfield wallet address, you can query its balance by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"GetAccountBalance")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    // query current balance\n    balance, err := cli.GetAccountBalance(ctx, account.GetAddress().String())\n    if err != nil {\n        log.Fatalf("unable to get balance, %v", err)\n    }\n    log.Printf("%s Current balance: %s", account.GetAddress().String(), balance.String())\n')),(0,r.kt)("h4",{id:"3-query-storage-providers"},"3. Query Storage Providers"),(0,r.kt)("p",null,"In addition, the SDK provides support for querying the list of storage providers available and offers generic search capabilities for exploring metadata attributes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    cli, err := client.New(chainId, rpcAddr, client.Option{DefaultAccount: account})\n    if err != nil {\n        log.Fatalf("unable to new greenfield client, %v", err)\n    }\n    ctx := context.Background()\n\n    // get storage providers list\n    spLists, err := cli.ListStorageProviders(ctx, true)\n    if err != nil {\n        log.Fatalf("fail to list in service sps")\n    }\n\n')),(0,r.kt)("h4",{id:"4-query-storage-price"},"4. Query Storage Price"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    // choose the first sp to be the primary SP\n    primarySP := spLists[0].GetOperatorAddress()\n\n    // query price for storing data\n    price, err := cli.GetStoragePrice(ctx,primarySP)\n    if err != nil {\n        log.Fatalf("fail to list in service sps")\n    }\n\n    log.Printf("Read Price is %s and Store price is %s \\n",price.ReadPrice,price.StorePrice)\n\n')),(0,r.kt)("h4",{id:"5-query-buckets"},"5. Query Buckets"),(0,r.kt)("p",null,"You can query the bucket info like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    // head bucket\n    bucketInfo, err := cli.HeadBucket(ctx, bucketName)\n    handleErr(err, "HeadBucket")\n    log.Println("bucket info:", bucketInfo.String())\n')),(0,r.kt)("h4",{id:"5-query-objects"},"5. Query Objects"),(0,r.kt)("p",null,"List all the objects under the same bucket"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    // list object\n    objects, err := cli.ListObjects(ctx, bucketName, types.ListObjectsOptions{\n        ShowRemovedObject: false, Delimiter: "", MaxKeys: 100, EndPointOptions: &types.EndPointOptions{\n            Endpoint:  httpsAddr, // sp endpoint\n            SPAddress: "",\n        }})\n    log.Println("list objects result:")\n    for _, obj := range objects.Objects {\n        i := obj.ObjectInfo\n        log.Printf("object: %s, status: %s\\n", i.ObjectName, i.ObjectStatus)\n    }\n')),(0,r.kt)("p",null,"Apart from the basic data queries shown above, there are many more features. Please see the",(0,r.kt)("a",{parentName:"p",href:"https://docs.bnbchain.org/greenfield-docs/docs/api/endpoints"},"JSON-RPC API Reference"),"for all Greenfield API definitions."),(0,r.kt)("h3",{id:"transactions"},"Transactions"),(0,r.kt)("h4",{id:"1-manage-wallet"},"1. Manage Wallet"),(0,r.kt)("p",null,"Greenfield wallets hold addresses that you can use to manage objects, sign transactions, and pay for gas fees. In this section, we will demonstrate different ways to manage your wallet."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"First, let\u2019s make sure your connected node is running and the wallet address contains some testnet BNB."),(0,r.kt)("li",{parentName:"ul"},"Create a new file called ",(0,r.kt)("inlineCode",{parentName:"li"},"account.go")," in the same project as earlier. This is where we\u2019ll write all out wallet-related code."),(0,r.kt)("li",{parentName:"ul"},"In ",(0,r.kt)("inlineCode",{parentName:"li"},"account.go")," import modules and initialize your private key or mnemonic phrase.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    //import mnemonic\n    account, err := types.NewAccountFromMnemonic("test", mnemonic)\n    //import private key\n    account, err := types.NewAccountFromPrivateKey("test", privateKey)\n')),(0,r.kt)("p",null,"Let\u2019s create a second wallet address so we can test transfers. The new address will be created locally and start with 0 token balance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    //create a differet account\n    account2, _, err := types.NewAccount("test2")\n')),(0,r.kt)("p",null,"Now, let\u2019s try to transfer tBNB to this new address. Under the hood, this will create a transaction to transfer tBNB from",(0,r.kt)("inlineCode",{parentName:"p"},"fromAddress"),"to",(0,r.kt)("inlineCode",{parentName:"p"},"toAddress"),", sign the transaction using SDK, and send the signed transaction to the Greenfield node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    // transfer token to acccount2\n    transferTxHash, err := cli.Transfer(ctx, account2.GetAddress().String(), math.NewIntFromUint64(1000000000000000000), types2.TxOption{})\n    if err != nil {\n        log.Fatalf("unable to send, %v", err)\n    }\n    log.Printf("Transfer response: %s", transferTxHash)\n\n    // wait for transaction hash\n    waitForTx, err := cli.WaitForTx(ctx, transferTxHash)\n\n    log.Printf("Wait for tx: %s", waitForTx.String())\n\n    //verify account2\'s balance\n    balance, err = cli.GetAccountBalance(ctx, account2.GetAddress().String())\n')),(0,r.kt)("p",null,"Run the code to test the transfer of tBNB:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"    go run account.go\n")),(0,r.kt)("p",null,"This will output something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'raw_log: \'[{"msg_index":0,"events":[{"type":"message","attributes":[{"key":"action","value":"/cosmos.bank.v1beta1.MsgSend"},{"key":"sender","value":"0x525482AB3922230e4D73079890dC905dCc3D37cd"},{"key":"module","value":"bank"}]},{"type":"coin_spent","attributes":[{"key":"spender","value":"0x525482AB3922230e4D73079890dC905dCc3D37cd"},{"key":"amount","value":"1BNB"}]},{"type":"coin_received","attributes":[{"key":"receiver","value":"0x78C3A3d10B1032bB2810366361dCE84E2e92eFCB"},{"key":"amount","value":"1BNB"}]},{"type":"transfer","attributes":[{"key":"recipient","value":"0x78C3A3d10B1032bB2810366361dCE84E2e92eFCB"},{"key":"sender","value":"0x525482AB3922230e4D73079890dC905dCc3D37cd"},{"key":"amount","value":"1BNB"}]},{"type":"message","attributes":[{"key":"sender","value":"0x525482AB3922230e4D73079890dC905dCc3D37cd"}]}]}]\'\ntimestamp: "2023-06-22T20:02:19Z"\ntx:\n  \'@type\': /cosmos.tx.v1beta1.Tx\n  auth_info:\n    fee:\n      amount:\n      - amount: "6000000000000"\n        denom: BNB\n      gas_limit: "1200"\n      granter: ""\n      payer: ""\n    signer_infos:\n    - mode_info:\n        single:\n          mode: SIGN_MODE_EIP_712\n      public_key:\n        \'@type\': /cosmos.crypto.eth.ethsecp256k1.PubKey\n        key: AirjhHwjRcZ34op5yCKHtDkn91RDgFOY8cJmbHH6Tmlu\n      sequence: "12"\n    tip: null\n  body:\n    extension_options: []\n    memo: ""\n    messages:\n    - \'@type\': /cosmos.bank.v1beta1.MsgSend\n      amount:\n      - amount: "1"\n        denom: BNB\n      from_address: 0x525482AB3922230e4D73079890dC905dCc3D37cd\n      to_address: 0x78C3A3d10B1032bB2810366361dCE84E2e92eFCB\n    non_critical_extension_options: []\n    timeout_height: "0"\n  signatures:\n  - FjUNT2dzpQZhCmVTLDGMEy1uR1NaNLeYjvqQiPr2xHM5xxeYP5Mic8CSxZtg3k4WHcAIEnQNcszqBi7fsgETagA=\ntxhash: DFC2CE0514FE334B5BCB6BC3EBCCCD7A6E16B4CAEDC4FFDBE3F2FA3B6E548E61\n')),(0,r.kt)("h3",{id:"make-a-storage-deal"},"Make A Storage Deal"),(0,r.kt)("p",null,"Storing data is one of the most important features of Greenfield. In this section, we\u2019ll walk through the end-to-end process of storing your data on the Greenfield network. We\u2019ll start by importing your data, then make a storage deal with a storage provider, and finally wait for the deal to complete."),(0,r.kt)("h4",{id:"1-create-a-storagego-file"},"1. Create a ",(0,r.kt)("inlineCode",{parentName:"h4"},"storage.go")," file"),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"storage.go")," file in yourdemoproject and add the following boilerplate code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n\n  // initialize account\n  account, err := types.NewAccountFromPrivateKey("test", privateKey)\n  log.Println("address info:", account)\n\n  if err != nil {\n      log.Fatalf("New account from private key error, %v", err)\n  }\n\n  //initialize client\n  cli, err := client.New(chainId, rpcAddr, client.Option{DefaultAccount: account})\n  if err != nil {\n      log.Fatalf("unable to new greenfield client, %v", err)\n  }\n  ctx := context.Background()\n\n  // 1. choose storage provider\n\n  // 2. Create a bucket\n\n  // 3. Upload your data and set a quota\n}\n')),(0,r.kt)("h4",{id:"2-choose-sp"},"2. Choose SP"),(0,r.kt)("p",null,"You can query the list of SP."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    // get storage providers list\n    spLists, err := cli.ListStorageProviders(ctx, true)\n    if err != nil {\n        log.Fatalf("fail to list in service sps")\n    }\n    //choose the first sp to be the primary SP\n    primarySP := spLists[0].GetOperatorAddress()\n')),(0,r.kt)("h4",{id:"3-create-buckets"},"3. Create Buckets"),(0,r.kt)("p",null,"Bucket can be private or public. You can customize it with options."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"VISIBILITY","_","TYPE","_","PUBLIC","_","READ"),(0,r.kt)("li",{parentName:"ul"},"VISIBILITY","_","TYPE","_","PRIVATE")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"    chargedQuota := uint64(100)\n    visibility := storageTypes.VISIBILITY_TYPE_PUBLIC_READ\n    opts := types.CreateBucketOptions{Visibility: visibility, ChargedQuota: chargedQuota}\n")),(0,r.kt)("p",null,"To understand how does ",(0,r.kt)("inlineCode",{parentName:"p"},"quota")," work, read ",(0,r.kt)("a",{parentName:"p",href:"https://docs.bnbchain.org/greenfield-docs/docs/guide/core-concept/billing-payment#storage-service-fee"},"this"),"."),(0,r.kt)("h4",{id:"4-upload-objects"},"4. Upload Objects"),(0,r.kt)("p",null,"Objects can also be private or public."),(0,r.kt)("p",null,"Uploading objects is composed of two parts: ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"put"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CreateObject")," gets an approval of creating an object and sends createObject txn to Greenfield network."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PutObject")," supports the second stage of uploading the object to bucket.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    // create and put object\n    txnHash, err := cli.CreateObject(ctx, bucketName, objectName, bytes.NewReader(buffer.Bytes()), types.CreateObjectOptions{})\n\n    handleErr(err, "CreateObject")\n\n    // Put your object\n    err = cli.PutObject(ctx, bucketName, objectName, int64(buffer.Len()),\n        bytes.NewReader(buffer.Bytes()), types.PutObjectOptions{TxnHash: txnHash})\n    handleErr(err, "PutObject")\n\n    log.Printf("object: %s has been uploaded to SP\\n", objectName)\n\n    //wait for SP to seal your object\n    waitObjectSeal(cli, bucketName, objectName)\n')),(0,r.kt)("p",null,'The primary SP syncs with secondary SPs to set up the data redundancy, and then it signs a "',(0,r.kt)("inlineCode",{parentName:"p"},"Seal"),'" transaction with the finalized metadata for storage. If the primary SP determines that it doesn\'t want to store the file due to whatever reason, it can also "',(0,r.kt)("inlineCode",{parentName:"p"},"SealReject"),'" the request.'),(0,r.kt)("h3",{id:"object-management"},"Object Management"),(0,r.kt)("h4",{id:"1-read-object"},"1. Read Object"),(0,r.kt)("p",null,"You can call ",(0,r.kt)("inlineCode",{parentName:"p"},"GetObject")," function to download data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    // get object\n    reader, info, err := cli.GetObject(ctx, bucketName, objectName, types.GetObjectOption{})\n    handleErr(err, "GetObject")\n    log.Printf("get object %s successfully, size %d \\n", info.ObjectName, info.Size)\n    handleErr(err, "GetObject")\n    objectBytes, err := io.ReadAll(reader)\n    if !bytes.Equal(objectBytes, buffer.Bytes()) {\n        handleErr(errors.New("download content not same"), "GetObject")\n    }\n')),(0,r.kt)("h4",{id:"2-update-object-visibility"},"2. Update Object Visibility"),(0,r.kt)("p",null,"You can call ",(0,r.kt)("inlineCode",{parentName:"p"},"UpdateObjectVisibility")," to change object visibility"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"    // update object visibility\n    updateBucketTx, err := ccli.UpdateBucketVisibility(s.ClientContext, bucketName,\n    storageTypes.VISIBILITY_TYPE_PRIVATE, types.UpdateVisibilityOption{})\n")),(0,r.kt)("h4",{id:"3-delete-object"},"3. Delete Object"),(0,r.kt)("p",null,"The function ",(0,r.kt)("inlineCode",{parentName:"p"},"DeleteObject")," support deleting objects."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    // delete object\n    delTx, err := cli.DeleteObject(ctx, bucketName, objectName, types.DeleteObjectOption{})\n    handleErr(err, "DeleteObject")\n    _, err = cli.WaitForTx(ctx, delTx)\n    if err != nil {\n        log.Fatalln("txn fail")\n    }\n    log.Printf("object: %s has been deleted\\n", objectName)\n')),(0,r.kt)("h2",{id:"greenfield-client-documentation"},"Greenfield Client Documentation"),(0,r.kt)("h3",{id:"usage-1"},"Usage"),(0,r.kt)("p",null,"Import Greenfield Go SDK client package, client package provides a client for interacting with Greenfield blockchain and SPs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    import "github.com/bnb-chain/greenfield-go-sdk/client"\n')),(0,r.kt)("p",null,"Provide Greenfield blockchain RPC endpoint and chainID info, new a Greenfield Go SDK client instance to start the journey."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func New(chainID string, endpoint string, option Option) (Client, error)\n")),(0,r.kt)("h3",{id:"api-documentation"},"API Documentation"),(0,r.kt)("p",null,"The Greenfield Go SDK client wraps lots of APIs for interacting with Greenfield, including account, bank, storage, and\npermission APIs, etc. For more details, you can refer to ",(0,r.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/bnb-chain/greenfield-go-sdk"},"Greenfield Go SDK Docs"),"."),(0,r.kt)("h2",{id:"code-repository"},"Code Repository"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/bnb-chain/greenfield-go-sdk"},"Official Go implementation SDK"))),(0,r.kt)("h2",{id:"more-info"},"More info"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.bnbchain.org/greenfield-docs/docs/guide/greenfield-blockchain/modules/storage-module"},"Storage Module on Greenfield"),": The storage module on Greenfield Chain."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.bnbchain.org/greenfield-docs/docs/guide/greenfield-blockchain/modules/storage-provider"},"Storage Provider on Greenfield"),": The storage provider on Greenfield Chain."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.bnbchain.org/greenfield-docs/docs/guide/greenfield-blockchain/modules/data-availability-challenge"},"Data Availability Challenge"),": The correctness of payload be stored in SP."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.bnbchain.org/greenfield-docs/docs/guide/storage-provider/introduction/overview"},"Storage Provider Introduction"),": The Greenfield Storage Provider documents."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.bnbchain.org/greenfield-docs/docs/guide/storage-provider/run-book/compile-dependences"},"Storage Provider Compiling and Dependencies"),": The detailed introduction to sp compiling and dependencies."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.bnbchain.org/greenfield-docs/docs/guide/storage-provider/run-book/run-local-SP-network"},"Run Local Storage Provider Network"),": The introduction to run local SP env for testing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.bnbchain.org/greenfield-docs/docs/guide/storage-provider/run-book/run-testnet-SP-node"},"Run Testnet Storage Provider Node"),": The introduction to run testnet SP node.")))}p.isMDXComponent=!0}}]);